<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Karol Stasiak's Blog]]></title>
  <link href="http://KarolS.github.io/categories/programming/atom.xml" rel="self"/>
  <link href="http://KarolS.github.io/"/>
  <updated>2015-08-08T22:42:51+02:00</updated>
  <id>http://KarolS.github.io/</id>
  <author>
    <name><![CDATA[Karol Stasiak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 8 Functional Interfaces Cheatsheet]]></title>
    <link href="http://KarolS.github.io/blog/2015/08/08/java-8-functional-interfaces-cheatsheet/"/>
    <updated>2015-08-08T22:37:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2015/08/08/java-8-functional-interfaces-cheatsheet</id>
    <content type="html"><![CDATA[<p>Java 8 introduced basic support for first-class functions. The functions, unlike in other languages, aren’t represented by only handful of types. Instead, Java 8 uses dozens of various types depending on arity, parameter types and the return type. The standard documentation is pretty unwieldy, so for my and your convenience, I prepared a list of all functional interfaces in a more useful order.</p>

<p>Few things to have in mind:</p>

<ul>
  <li>
    <p>All interfaces are in <code>java.util.function</code> package unless otherwise noted.</p>
  </li>
  <li>
    <p>Interfaces are specialized only for <code>boolean</code>, <code>int</code>, <code>long</code> and <code>double</code>, and only sometimes. Other primitive types, and all primitive types in certain situations, will have to be boxed.</p>
  </li>
</ul>

<h3 id="nullary-functions">Nullary functions</h3>

<table>
  <thead>
    <tr>
      <th>function type</th>
      <th>Java type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>() → <strong>void</strong></td>
      <td><code>java.lang.Runnable</code></td>
    </tr>
    <tr>
      <td>() → <strong>boolean</strong></td>
      <td><code>BooleanSupplier</code></td>
    </tr>
    <tr>
      <td>() → <strong>int</strong></td>
      <td><code>IntSupplier</code></td>
    </tr>
    <tr>
      <td>() → <strong>long</strong></td>
      <td><code>LongSupplier</code></td>
    </tr>
    <tr>
      <td>() → <strong>double</strong></td>
      <td><code>DoubleSupplier</code></td>
    </tr>
    <tr>
      <td>() → <em>A</em></td>
      <td><code>Supplier&lt;A&gt;</code> or <code>java.lang.Callable&lt;A&gt;</code></td>
    </tr>
  </tbody>
</table>

<!-- more -->

<hr />

<p>Whether to use <code>Supplier</code> or <code>Callable</code>, it’s mostly a matter of taste and semantics. <code>Supplier</code> has a method called <code>get</code>, <code>Callable</code> has <code>call</code>. This suggests that functions with larger side-effects should be <code>Callable</code>, and functions with small side-effects (mostly lazily-initialized values) should be <code>Supplier</code>s. Of course, this is only a suggestion.</p>

<hr />

<h3 id="unary-functions">Unary functions</h3>

<table>
  <thead>
    <tr>
      <th>function type</th>
      <th>Java type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>int</strong> → <strong>void</strong></td>
      <td><code>IntConsumer</code></td>
    </tr>
    <tr>
      <td><strong>long</strong> → <strong>void</strong></td>
      <td><code>LongConsumer</code></td>
    </tr>
    <tr>
      <td><strong>double</strong> → <strong>void</strong></td>
      <td><code>DoubleConsumer</code></td>
    </tr>
    <tr>
      <td><em>A</em> → <strong>void</strong></td>
      <td><code>Consumer&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td><strong>int</strong> → <strong>boolean</strong></td>
      <td><code>IntPredicate</code></td>
    </tr>
    <tr>
      <td><strong>long</strong> → <strong>boolean</strong></td>
      <td><code>LongPredicate</code></td>
    </tr>
    <tr>
      <td><strong>double</strong> → <strong>boolean</strong></td>
      <td><code>DoublePredicate</code></td>
    </tr>
    <tr>
      <td><em>A</em> → <strong>boolean</strong></td>
      <td><code>Predicate&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td><strong>int</strong> → <strong>int</strong></td>
      <td><code>IntUnaryOperator</code></td>
    </tr>
    <tr>
      <td><strong>long</strong> → <strong>int</strong></td>
      <td><code>LongToIntFunction</code></td>
    </tr>
    <tr>
      <td><strong>double</strong> → <strong>int</strong></td>
      <td><code>DoubleToIntFunction</code></td>
    </tr>
    <tr>
      <td><em>A</em> → <strong>int</strong></td>
      <td><code>ToIntFunction&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td><strong>int</strong> → <strong>long</strong></td>
      <td><code>IntToLongFunction</code></td>
    </tr>
    <tr>
      <td><strong>long</strong> → <strong>long</strong></td>
      <td><code>LongUnaryOperator</code></td>
    </tr>
    <tr>
      <td><strong>double</strong> → <strong>long</strong></td>
      <td><code>DoubleToLongFunction</code></td>
    </tr>
    <tr>
      <td><em>A</em> → <strong>long</strong></td>
      <td><code>ToLongFunction&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td><strong>int</strong> → <strong>double</strong></td>
      <td><code>IntToDoubleFunction</code></td>
    </tr>
    <tr>
      <td><strong>long</strong> → <strong>double</strong></td>
      <td><code>LongToDoubleFunction</code></td>
    </tr>
    <tr>
      <td><strong>double</strong> → <strong>double</strong></td>
      <td><code>DoubleUnaryOperator</code></td>
    </tr>
    <tr>
      <td><em>A</em> → <strong>double</strong></td>
      <td><code>ToDoubleFunction&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td><em>A</em> → <em>A</em></td>
      <td><code>UnaryOperator&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td><em>A</em> → <em>B</em></td>
      <td><code>Function&lt;A, B&gt;</code></td>
    </tr>
  </tbody>
</table>

<hr />

<p>Note the following:</p>

<ul>
  <li>The primitive type of the argument is attached directly, the primitive type of the result uses the prefix <code>To</code>.</li>
  <li>If the result is <code>boolean</code>, then the function is called a predicate. It’ it’s <code>void</code>, then a consumer.</li>
  <li>If the parameter type and the result type are the same, the function is called a unary operator.</li>
  <li>There are no specialized interfaces from a primitive to a reference.</li>
</ul>

<hr />

<h3 id="binary-functions">Binary functions</h3>

<table>
  <thead>
    <tr>
      <th>function type</th>
      <th>Java type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>(<em>A</em>, <strong>int</strong>) → <strong>void</strong></td>
      <td><code>ObjIntConsumer&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <strong>long</strong>) → <strong>void</strong></td>
      <td><code>ObjLongConsumer&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <strong>double</strong>) → <strong>void</strong></td>
      <td><code>ObjDoubleConsumer&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <em>B</em>) → <strong>void</strong></td>
      <td><code>BiConsumer&lt;A, B&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <em>B</em>) → <strong>boolean</strong></td>
      <td><code>BiPredicate&lt;A, B&gt;</code></td>
    </tr>
    <tr>
      <td>(<strong>int</strong>, <strong>int</strong>) → <strong>int</strong></td>
      <td><code>IntBinaryOperator</code></td>
    </tr>
    <tr>
      <td>(<strong>long</strong>, <strong>long</strong>) → <strong>long</strong></td>
      <td><code>LongBinaryOperator</code></td>
    </tr>
    <tr>
      <td>(<strong>double</strong>, <strong>double</strong>) → <strong>double</strong></td>
      <td><code>DoubleBinaryOperator</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <em>A</em>) → <em>A</em></td>
      <td><code>BinaryOperator&lt;A&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <em>B</em>) → <strong>int</strong></td>
      <td><code>ToIntFunction&lt;A, B&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <em>B</em>) → <strong>long</strong></td>
      <td><code>ToLongBiFunction&lt;A, B&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <em>B</em>) → <strong>double</strong></td>
      <td><code>ToDoubleBiFunction&lt;A, B&gt;</code></td>
    </tr>
    <tr>
      <td>(<em>A</em>, <em>B</em>) → <em>C</em></td>
      <td><code>BiFunction&lt;A, B, C&gt;</code></td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="ternary-functions-and-above">Ternary functions and above</h3>

<p>None.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random ideas for Scala 3.0]]></title>
    <link href="http://KarolS.github.io/blog/2014/04/29/random-ideas-for-scala-3-0/"/>
    <updated>2014-04-29T01:22:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2014/04/29/random-ideas-for-scala-3-0</id>
    <content type="html"><![CDATA[<p>Here comes a list of things that I would love to see in Scala 3.0. Some of them are breaking changes, hence 3.0 not 2.13 or anything like that. Some of them are about the compiler, some of them are about the library, some of them are about the external tools. Some of those ideas are different solutions for the same problem.</p>

<!-- more -->

<h3 id="syntax">Syntax</h3>

<ul>
  <li>
    <p>Treating number literals with leading zeroes as decimal (with a warning for a version or two).</p>
  </li>
  <li>
    <p>Binary and octal literals in forms of <code>0b01010101</code> and <code>0o037</code>.</p>
  </li>
  <li>
    <p>Underscores in numeric literals: <code>1_000_000</code>.</p>
  </li>
  <li>
    <p>Some kind of byte array literal.</p>
  </li>
  <li>
    <p><code>BigInt</code> and <code>BigDecimal</code> literals: <code>100000000000000000000000000000000000N</code>, <code>0.01m</code></p>
  </li>
  <li>
    <p><code>Short</code> and <code>Byte</code> literals, both accepting both signed and unsigned values: <code>20000s</code>, <code>255y</code></p>
  </li>
  <li>
    <p>Removal of XML literals and an <code>xml</code> macro string context as a replacement: <code>xml"&lt;p&gt;Hello $world&lt;/p&gt;"</code></p>
  </li>
  <li>
    <p>Introducing true <code>break</code>, <code>continue</code> and <code>goto</code>.</p>
  </li>
  <li>
    <p>A special syntax for monads, like Haskell’s <code>do</code>.</p>

    <ul>
      <li>
        <p><code>do</code> is already a keyword, it can cause problems with <code>do...while</code> loops.</p>
      </li>
      <li>
        <p><code>for</code> is clunky, especially when it comes to <code>if...else</code>. Maybe fix <code>for</code>?</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="standard-library">Standard library</h3>

<ul>
  <li>
    <p>Clean-up of the collections. Currently, the standard collections are a little mess. I think <a href="http://www.slideshare.net/extempore/a-scala-corrections-library">Paul Phillips sums it up nicely</a>.</p>
  </li>
  <li>
    <p>Standard <code>scala-time</code> library, being a wrapper for both Joda Time and Java 8 Time API.</p>

    <ul>
      <li>There would be two functionally identical implementations.</li>
    </ul>
  </li>
  <li>
    <p>HLists.</p>
  </li>
  <li>
    <p>Vectors with length known at compile-time.</p>
  </li>
  <li>
    <p>A macro that includes C header files on compile time and generates corresponding JNA interfaces.</p>
  </li>
  <li>
    <p>Removal of <code>/:</code> and <code>:\</code> methods.</p>
  </li>
  <li>
    <p>A clone of .NET’s <code>dynamic</code> type.</p>
  </li>
  <li>
    <p><code>String.toInt</code> and friends accepting a base.</p>
  </li>
  <li>
    <p>A <code>^</code> operator for sets, returning the symmetric difference.</p>
  </li>
</ul>

<h3 id="value-classes">Value classes</h3>

<ul>
  <li>
    <p>Specialization for custom value classes.</p>
  </li>
  <li>
    <p>Generating specialized classes on the fly by the compiler (so the compiler would take an existing class, either ours or from an external library, and specialize it).</p>

    <ul>
      <li>This would allow to specialize collections.</li>
    </ul>
  </li>
  <li>
    <p>Unboxed arrays for custom value classes.</p>
  </li>
  <li>
    <p>Different name mangling for methods taking value classes.</p>

    <ul>
      <li>Currently, if you have <code>class A(x: Int) extends AnyVal</code>, <code>class B(x: Int) extends AnyVal</code> and try to write both <code>def method(a: A)</code> and <code>def method(b: B)</code>, you get an error.</li>
    </ul>
  </li>
  <li>
    <p>Multi-field value classes.</p>

    <ul>
      <li>
        <p>This could work as following: if the value is a field, a local variable, or a parameter, use several variables. If it’s a return value, box it.</p>
      </li>
      <li>
        <p>This of course wouldn’t improve performance much, unless there would be an alternative way to return such values.</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="type-system">Type system</h3>

<ul>
  <li>
    <p>Almost full type inference for private and local functions and variables.</p>
  </li>
  <li>
    <p>Built-in type-level integers, booleans and strings, with some operations on them.</p>
  </li>
  <li>
    <p>Compile-time null safety – detection of provable paths that could potentially lead to NPE’s.</p>
  </li>
  <li>
    <p>Multimethods.</p>
  </li>
</ul>

<h3 id="fixing-minor-annoyances">Fixing minor annoyances</h3>

<ul>
  <li>
    <p>Adding Scalaz’s <code>some</code> and <code>none</code>.</p>
  </li>
  <li>
    <p>Adding Scalaz’s <code>Equal</code> and <code>Monoid</code> typeclasses.</p>
  </li>
  <li>
    <p><code>@adt</code> annotation on a trait would make the generated <code>apply</code> method of companion objects of case classes that implement that trait return that trait.</p>

    <ul>
      <li>
        <p>For example, annotating <code>Option</code> with <code>@adt</code> and writing <code>var x = Some(1)</code> would make <code>x</code> of type <code>Option[Int]</code>, not <code>Some[Int]</code>.</p>
      </li>
      <li>
        <p>It would be nice to make it somehow work with case objects, especially in polymorphic cases, like with <code>Option</code> and <code>None</code>, or <code>Either</code> and either <code>Left</code> or <code>Right</code> (either of these fixes only one type parameter, not two).</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Ignoring missing annotation definitions in external libraries.</p>
  </li>
  <li>
    <p>Allowing for creating annotations with runtime retention in Scala.</p>
  </li>
</ul>

<h3 id="tooling">Tooling</h3>

<ul>
  <li>
    <p>A decent, officially supported Findbugs plugin.</p>
  </li>
  <li>
    <p>A configurable style checker, preferably including <a href="http://www.scala-lang.org/old/node/8610">“powerlevels”</a>.</p>
  </li>
  <li>
    <p>A Java-to-idiomatic-Scala converter.</p>
  </li>
  <li>
    <p>A Scala-to-idiomatic-Java converter.</p>
  </li>
  <li>
    <p>Easier developing for Android.</p>

    <ul>
      <li>
        <p>Built-in Proguard-like optimizer?</p>
      </li>
      <li>
        <p>Dalvik backend?</p>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing catamorphisms in Java]]></title>
    <link href="http://KarolS.github.io/blog/2014/04/29/implementing-catamorphisms-in-java/"/>
    <updated>2014-04-29T01:20:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2014/04/29/implementing-catamorphisms-in-java</id>
    <content type="html"><![CDATA[<p><em>Warning: I’m now going to wake up the ghosts of the past. The past which includes your undergraduate abstract algebra lectures.</em></p>

<p>This post is mostly a result of my boredom and my willingness to show that you can shoehorn almost every abstraction into almost every programming language, but it’s not exactly the best idea to do so.</p>

<p>Also, I simply wanted to say a word or two about several abstract mathematical concepts. It can be a worthwhile intellectual exercise.</p>

<h2 id="algebras">Algebras</h2>

<p>Before I talk about catamorphisms, mentioned in the title, I’d like to have a look at a very abstract and general mathematical structure: an algebra.</p>

<p>An <strong>algebra</strong> is a tuple that contains:</p>

<ul>
  <li>
    <p>some sets (called carrier sets), most often one</p>
  </li>
  <li>
    <p>usually some operations, each of them from some Cartesian product of the carrier sets to one of the carrier sets</p>
  </li>
  <li>
    <p>sometimes some distinguished elements from those sets (they’re often superfluous, but they will be required later; you can also think about them as of nullary operations)</p>
  </li>
</ul>

<p>Examples: </p>

<ul>
  <li>
    <p>a set of strings <code>Str</code> and the operation of concatenation <code>+: Str × Str → Str</code></p>
  </li>
  <li>
    <p>a set of natural numbers <code>Nat</code> and the operation of addition: <code>+: Nat × Nat → Nat</code></p>
  </li>
  <li>
    <p>a set of finite subsets of natural numbers <code>Nat</code> and a set of natural numbers <code>P(Nat)</code>, a distinguished empty set <code>Ø</code> and the operations of union and intersection <code>P(Nat) × P(Nat) → P(Nat)</code> and the largest element operation <code>max: P(Nat) → Nat</code> (with <code>max(Ø) = 0</code>)</p>
  </li>
</ul>

<p><em>Note: I’m using the <code>+</code> operator for string concatenation because the article is supposed to end up with creating some Java code, and Java uses <code>+</code> for string concatenation.</em></p>

<!-- more -->

<p>Usually when talking about an algebra, one specifies properties those operations have, for example concatenation is associative, addition is commutative and associative, and so on.</p>

<p>When you look at it, an algebra can be considered equivalent to a program in a statically typed functional language. </p>

<h2 id="homomorphisms">Homomorphisms</h2>

<p>The second important thing we need are algebra homomorphisms. Let’s assume we have two algebras <code>A₁</code> and <code>A₂</code> with the following properties:</p>

<ul>
  <li>
    <p>They have the same number of carrier sets, e.g. <code>X₁, Y₁, Z₁</code> and <code>X₂, Y₂, Z₂</code>.</p>
  </li>
  <li>
    <p>They have the same number of distinguished elements from the corresponding carriers sets, e.g. <code>ε₁ ∈ X₁, α₁ ∈ Y₁, β₁ ∈ Y₁</code> and <code>ε₂ ∈ X₂, α₂ ∈ Y₂, β₂ ∈ Y₂</code>.</p>
  </li>
  <li>
    <p>They have the same number of operations from the correspoding carriers sets to the corresponding carrier sets, e.g. <code>f₁: X₁×Y₁→Y₁, g₁: Y₁×Y₁→Y₁, h₁: X₁×X₁→X₁, k₁: Y₁→Z₁</code> and <code>f₂: X₂×Y₂→Y₂, g₂: Y₂×Y₂→Y₂, h₂: X₂×X₂→X₂, k₂: Y₂→Z₂</code>.</p>
  </li>
</ul>

<p>I’ll be calling such pairs of algebras <strong>algebras with matching signatures</strong>.</p>

<p>Now if we have a function <code>H</code> from carrier sets of one algebra to carriers sets of another algebra, and that function preserves the algebraic structure, e.g. in the example from above:</p>

<ul>
  <li>
    <p><code>H: (X₁ ∪ Y₁ ∪ Z₁) → (X₂ ∪ Y₂ ∪ Z₂)</code></p>
  </li>
  <li>
    <p><code>H(ε₁) = ε₂</code>, <code>H(α₁) = α₂</code>, <code>H(β₁) = β₂</code></p>
  </li>
  <li>
    <p><code>H(f₁(x,y)) = f₂(H(x), H(y))</code>, <code>H(g₁(y,y')) = g₂(H(y), H(y'))</code>, <code>H(h₁(x,x')) = h₂(H(x), H(x'))</code>, <code>H(k₁(y)) = k₂(H(y))</code></p>
  </li>
</ul>

<p>then we call <code>H</code> a <strong>homomorphism</strong>.</p>

<p>You probably need an example. I’ll start with a simple one: the two first algebras I mentioned have a homomorphism between them: the length. Indeed, <code>length(str₁ + str2) = length(str₁) + length(str₂)</code>. </p>

<p>There’s also a homomorphism back, let’s call it <code>aaaa</code>, which for a given natural number returns a string made of that number of a’s, e.g. <code>aaaa(3) = "aaa"</code>. You can easy see that <code>aaaa(n₁ + n₂) = aaaa(n₁) + aaaa(n₂)</code>.</p>

<p><em>Note: You have probably noticed, that instead of performing calculations on some operands in one algebra and finally converting the result to another algebra using a homomorphism, we can first convert the result to the second algebra and then perform the calculations. Indeed that is correct and usually it’s useful, especially if the operations in the second algebra are easier to perform. Haskell library <a href="https://github.com/mikeizbicki/HLearn">HLearn</a> converts an algebra of data samples to an algebra of statistics, allowing for instantaneous recalculating of statistics after adding some data to an enormous sample.</em></p>

<p>If the homomorphism is invertible, i.e. there is a homomorphism <code>K</code> from the second algebra back to the first, and <code>K(H(x)) = x</code> and <code>H(K(y)) = y</code>, then we call <code>H</code> an <strong>isomorphism</strong> and the two algebras <strong>isomorphic</strong>. Two isomorphic algebras can be considered equivalent for most purposes.</p>

<p>Since <code>length</code> and <code>aaaa</code> don’t have that property (<code>aaaa(length("b")) = "a" ≠ "b"</code>), nor any other pair of homomorphisms does, the algebra of strings with concatenation and the algebra of natural numbers with addition are not isomorphic.</p>

<h2 id="initial-algebras">Initial algebras</h2>

<p>A special category of algebras are <strong>initial algebras</strong>. Their carrier sets are not given, but are defined from the given distinguished elements and operations. For example, the carrier set <code>X</code> for an initial algebra with distinguished element <code>Z ∈ X</code> and unary operation <code>S: X → X</code> is <code>{Z, S(Z), S(S(Z)), S(S(S(Z))), S(S(S(S(Z))))...}</code>. Operations in initial algebras are not commutative nor associative, but they are always injective. They’re sometimes called <strong>constructors</strong>, and like the constructors in programming languages, they always construct new, distinct values. When initial algebras are implemented, they’re usually called <strong>algebraic data structures</strong>.</p>

<p>Let’s implement the above initial algebra in Java:</p>

<p>```java X.java
public interface X {</p>

<p>}
```</p>

<p><code>java Z.java
public class Z implements X {
    public boolean equals(Object o){
        return o instanceof Z;
    }
}
</code></p>

<p>```java S.java
public class S implements X {</p>

<p>public final X field1;</p>

<p>public S(X param1){
      this.field1 = param1;
  }</p>

<p>public boolean equals(Object o){
      return o instanceof S &amp;&amp; ((S)o).field1.equals(field1);
  }
}
```</p>

<p><em>Note: Implementing <code>hashCode</code>, providing null-safety and adding getters left as an exercise for the reader.</em></p>

<h2 id="catamorphisms">Catamorphisms</h2>

<p>The nice thing about the initial algebras is that for every algebra with a matching signature, there exists exactly one homomorphism from initial algebra to the given algebra. That unique homomorphism is called the <strong>catamorphism</strong>.</p>

<p>For example, given the algebra above, we can uniquely map it onto an algebra with natural numbers, number <code>0</code>, and function <code>x → x + 1</code>: <code>H(Z) → 0</code>, <code>H(S(x)) → H(x) + 1</code>. While it may look tautological, keep in mind that the elements of the carrier set of an initial algebra are uniquely defined by the distinguished elements and operations that were used to create them.</p>

<p>Let’s implement it in Java!</p>

<p><code>java
public int h(X x){
    if (x instanceof Z) {
        return 0;
    } else if (x instanceof S) {
        return h(((S)x).field1) + 1;
    else {
        throw new IllegalArgumentException();
    }
}
</code></p>

<p>It works, but it’s ugly.</p>

<h2 id="pattern-matching-sort-of">Pattern matching… sort of</h2>

<p>Let’s take another look at our homomorphism in Java. The code has several issues:</p>

<ul>
  <li>
    <p>it explicitly checks type and casts the parameter;</p>
  </li>
  <li>
    <p>it calls itself recursively;</p>
  </li>
  <li>
    <p>it has this ugly unreachable code that will suddenly start throwing exceptions when we add another constructor to our <code>X</code> algebra.</p>
  </li>
</ul>

<p>Let’s address #1 and #3 first.</p>

<p>If we were using a functional language with first-class support for algebraic data types, we could write our homomorphism using pattern matching:</p>

<p><code>fsharp
let h x = 
  match x with
  | Z -&gt; 0
  | S field1 -&gt; h field1 + 1
</code></p>

<p>Java does not support pattern matching, that’s obvious and furthermore, the alternative solution using explicit casts is ugly and prone to bugs. To solve it in Java, the officially preferred way is to use the visitor pattern.</p>

<p><code>java XVisitor.java
interface XVisitor&lt;T&gt; {
      T visit(Z z);
      T visit(S s);
}
</code></p>

<p><code>java X.java
public interface X {
      &lt;T&gt; T visit(XVisitor&lt;T&gt; visitor);
}
</code></p>

<p><code>java Z.java
public class Z implements X {
    public boolean equals(Object o){
        return o instanceof Z;
    }
    public &lt;T&gt; T visit(XVisitor&lt;T&gt; visitor){
        return visitor.visit(this);
    }
}
</code></p>

<p>```java S.java
public class S implements X {</p>

<pre><code>public final X field1;

public S(X param1){
    this.field1 = param1;
}

public boolean equals(Object o){
    return o instanceof S &amp;&amp; ((S)o).field1.equals(field1);
}

public &lt;T&gt; T visit(XVisitor&lt;T&gt; visitor){
    return visitor.visit(this);
} } ```
</code></pre>

<p>```java H.java
class H implements XVisitor<integer> {</integer></p>

<pre><code>public int visitZ(Z z){
    return 0;
}

public int visit(S s){
    return s.field1.visit(this) + 1;
} } ```
</code></pre>

<p><em>Note: As you can see, it’s not the typical Visitor pattern as described by the Gang of Four. First, here the <code>visit</code> methods actually return something instead of returning <code>void</code>, second, GoF suggests that the branching classes, like <code>S</code> here, always had the visitor visit their children and express that in the <code>S.visit</code> method.</em></p>

<p>Since the only thing we need from the instances of our classes is values of their fields, we can simplify it further:</p>

<p><code>java XVisitor.java
interface XVisitor&lt;T&gt; {
    T visitZ();
    T visitS(X field1);
}
</code></p>

<p><code>java X.java
public interface X {
    &lt;T&gt; T visit(XVisitor&lt;T&gt; visitor);
}
</code></p>

<p><code>java Z.java
public class Z implements X {
    public boolean equals(Object o){
        return o instanceof Z;
    }
    public &lt;T&gt; T visit(XVisitor&lt;T&gt; visitor){
        return visitor.visitZ();
    }
}
</code></p>

<p>```java S.java
public class S implements X {</p>

<pre><code>public final X field1;

public S(X param1){
    this.field1 = param1;
}

public boolean equals(Object o){
    return o instanceof S &amp;&amp; ((S)o).field1.equals(field1);
}

public &lt;T&gt; T visit(XVisitor&lt;T&gt; visitor){
    return visitor.visitS(field1);
} } ```
</code></pre>

<p>```java H.java
class H implements XVisitor<integer> {</integer></p>

<pre><code>public int visitZ(){
    return 0;
}

public int visitS(X field1){
    return field1.visit(this) + 1;
} } ```
</code></pre>

<p>Looks way better. Too enterprisy for my taste, but hey, it’s Java.</p>

<p>The upside of this new approach is that whenever we add a new class implementing our base interface, the compiler will kick and scream until we fix our visitors.</p>

<p>The downside is that we still have to call <code>visit</code> in <code>visitS</code>. The burden of converting <code>field1</code> to <code>T</code> should be on the <code>S</code> class. The visitor interface should be decoupled from the <code>X</code> interface. Let’s try a bit harder.</p>

<h2 id="catamorphisms-and-visitors-take-two">Catamorphisms and visitors, take two</h2>

<p>Let’s have a look at our simple algebra so far:</p>

<p><code>java
interface X:
    Z()
    S(X param1)
</code></p>

<p>As you can see, it’s recursive. That means it’s also infinite.</p>

<p>Let’s get rid of the recursion somehow. What happens if we replace X with some type parameter T?</p>

<p><code>java
interface XPrecursor&lt;T&gt;:
    ZPrecursor&lt;T&gt;()
    SPrecursor&lt;T&gt;(T param1)
</code></p>

<p>(Sorry for weird syntax.)</p>

<p>As you can see, our algebra is no longer recursive. (It can still be infinite though, for example if some constructors use another infinite types.) Such family of non-recursive algebras is called the <strong>precursor</strong> of our initial algebra <code>X</code>. All algebras in this family are also initial.</p>

<p><em>Note: <code>XPrecursor&lt;X&gt;</code> is isomorphic to <code>X</code>. Here are the homomorphisms both ways:</em></p>

<p>```java
X fromPrecursor(XPrecursor<x> p){
    if (p instanceof ZPrecursor) {
        return new Z();
    } else if (p instanceof SPrecursor {
        return new S(((SPrecursor<x>)p).param1);
    } else {
        throw new IllegalArgumentException();
    }
}</x></x></p>

<p>XPrecursor toPrecursor(X x){
    if(x instanceof Z){
        return new ZPrecursor();
    } else if (x instanceof X) {
        return new SPrecursor<x>(((S)x).param1);
    } else {
        throw new IllegalArgumentException();
    }
}
```</x></p>

<p>How would a visitor for <code>XPrecursor&lt;T&gt;</code> look like?</p>

<p><code>java XPrecursorVisitor.java
interface XPrecursorVisitor&lt;T,U&gt; {
    U visitZ();
    U visitS(T field1);
}
</code></p>

<p><em>Note: Since <code>XPrecursor&lt;T&gt;</code> is not recursive, the visitor does not have to know anything about <code>XPrecursor&lt;T&gt;</code>.</em></p>

<p><em>Note: Remember: every <code>XPrecursorVisitor&lt;T,U&gt;</code> defines a homomorphism <code>XPrecursor&lt;T&gt; → U</code>.</em></p>

<p>And finally: can we convert an <code>XPrecursorVisitor&lt;T,T&gt;</code> into an <code>XVisitor&lt;T&gt;</code>? The answer is yes:</p>

<p>```java XCata.java
class XCata<t> implements XVisitor<t> {
    private final XPrecursorVisitor&lt;T,T&gt; underlying;</t></t></p>

<pre><code>public XCata(XPrecursorVisitor&lt;T,T&gt; u){
    underlying = u;
}

public T visitZ(){
    return underlying.visitZ();
}

public T visitS(X x){
    return underlying.visitS(x.visit(this));
} } ```
</code></pre>

<p>Now, let’s sum all that we know:</p>

<ul>
  <li>
    <p><code>X</code> is an initial algebra</p>
  </li>
  <li>
    <p>for every <code>T</code>, <code>XPrecursor&lt;T&gt;</code> is an initial algebra</p>
  </li>
  <li>
    <p>for every homomorphism <code>f: XPrecursor&lt;T&gt; → T</code> (which means <code>XPrecursorVisitor&lt;T,T&gt;</code>) exist at least one homomorphism <code>g: X → T</code> (which means <code>XVisitor&lt;T&gt;</code>), and only one that doesn’t incorporate any external constants into it</p>
  </li>
</ul>

<p>As some of you may have noticed, I called the converter <code>XCata</code>. Indeed, if we think of the <code>XPrecursorVisitor&lt;T,T&gt;</code> as of an algebra over <code>T</code> (where the methods represent the distinguished elements if zero parameters and the operations if not), <code>XCata</code> is the catamorphism from initial algebra <code>X</code> to the <code>T</code> algebra.</p>

<p>Armed with this knowledge, we can add <code>&lt;T&gt; T visit(XPrecursorVisitor&lt;T&gt; visitor)</code> to our X interface and inline the methods of <code>XCata</code> in the implementations of the new method:</p>

<p><code>java X.java
public interface X {
    &lt;T&gt; T visit(XPrecursorVisitor&lt;T&gt; visitor);
}
</code></p>

<p><code>java Z.java
public class Z implements X {
    public boolean equals(Object o){
        return o instanceof Z;
    }
    public &lt;T&gt; T visit(XPrecursorVisitor&lt;T&gt; visitor){
        return visitor.visitZ();
    }
}
</code></p>

<p>```java S.java
public class S implements X {</p>

<pre><code>public final X field1;

public S(X param1){
    this.field1 = param1;
}

public boolean equals(Object o){
    return o instanceof S &amp;&amp; ((S)o).field1.equals(field1);
}

public &lt;T&gt; T visit(XPrecursorVisitor&lt;T&gt; visitor){
    return visitor.visitS(field1.visit(visitor));
} } ```
</code></pre>

<h2 id="some-more-initial-algebra-examples">Some more initial algebra examples</h2>

<p>Before we continue, we will need some more examples. Here are some unfinished Java snippets:</p>

<p>```java
// a binary tree with leaves containing values of type T
interface Tree<t> { 
...</t></p>

<p>class Leaf<t> implements Tree<t> {
    Leaf(T leaf){ 
...</t></t></p>

<p>class Branch<t> implements Tree<t> {
    Branch(Tree<t> tree, Tree<t> right) {
...</t></t></t></t></p>

<p>// a simple integer arithmetic expression tree with both variables and constants
interface Expression {
…</p>

<p>class Variable extends Expression {
    Variable(String name) {
…</p>

<p>class Constant extends Expression {
    Constant(int value){
…</p>

<p>class Add extends Expression {
    Add(Expression expr1, Expression expr2) {
…</p>

<p>class Multiply extends Expression {
    Multiply(Expression expr1, Expression expr2) {
…</p>

<p>class Negate extends Expression {
    Negate(Expression expr) {
…
```</p>

<p>In fact, trees and expressions are the most common examples discussed in articles on similar topics.</p>

<h2 id="where-the-heck-to-use-all-that-theoretical-mumbo-jumbo">Where the heck to use all that theoretical mumbo-jumbo?</h2>

<p><a href="http://en.wikipedia.org/wiki/Catamorphism">Wikipedia says</a> that functional programmers refer to catamorphisms as <em>folds</em>. Every time you have some recursive datatype, usually tree-like or list-like, <em>folding</em> takes such large value and folds it into some nice, small, single value. It does that by looking only at the nearest neighbourhood: the already folded child nodes and the type and other fields of the current node.</p>

<p>From now on, I’ll call things I called PrecursorVisitors before, Folders.</p>

<p>Given the tree defined above, how would a folder for a <code>Tree&lt;T&gt;</code> look like?</p>

<p>```java TreeFolder.java
interface TreeFolder&lt;T,U&gt; {</p>

<pre><code>U visitLeaf(T leaf);

U visitBranch(U left, U right); } ```
</code></pre>

<p>And it’s used like this:</p>

<p><code>java Tree.java
interface Tree&lt;T&gt; {
    &lt;U&gt; fold(TreeFolder&lt;T,U&gt; folder);
}
</code></p>

<p>```java Leaf.java
class Leaf<t> implements Tree<t> {</t></t></p>

<pre><code>final T leaf;

Leaf(T leaf) {
    this.leaf = leaf;
} 

public &lt;U&gt; U fold(TreeFolder&lt;T,U&gt; folder) {
    return folder.visitLeaf(leaf);
} } ```
</code></pre>

<p>```java Branch.java
class Branch<t> implements Tree<t> {</t></t></p>

<pre><code>final Tree&lt;T&gt; left;
final Tree&lt;T&gt; right;

Branch(Tree&lt;T&gt; left, Tree&lt;T&gt; right) {
    this.left = left;
    this.right = right;
} 

public &lt;U&gt; U fold(TreeFolder&lt;T,U&gt; folder) {
    return folder.visitBranch(left.fold(folder), right.fold(folder));
} } ```
</code></pre>

<p>What can you use it for? For example, to get the leftmost element of the tree:</p>

<p>```java Leftmost.java
class Leftmost<t> extends TreeFolder&lt;T,U&gt; {</t></p>

<pre><code>public T visitLeaf(T leaf){
    return leaf;
}

public T visitBranch(T left, T right){
    return left;
} } ```
</code></pre>

<p>Or count leaves:</p>

<p>```java CountLeaves.java
class LeftMost<t> extends TreeFolder&lt;T,Integer&gt; {</t></p>

<pre><code>public Integer visitLeaf(T leaf){
    return 1;
}

public Integer visitBranch(Integer left, Integer right){
    return left + right;
} } ```
</code></pre>

<p>As for the expressions, evaluating them is one way of folding them:</p>

<p><code>java ExprFolder.java
interface ExprFolder&lt;T&gt; {
    T visitConst(int value);
    T visitVariable(String name);
    T visitAdd(T expr1, T expr2);
    T visitMul(T expr1, T expr2);
    T visitNegate(T expr);
}
</code></p>

<p>```java Evaluate.java
class Evaluate implements ExprFolder<integer> {
    private final Map&lt;String, Integer&gt; vars;</integer></p>

<pre><code>Evaluate(Map&lt;String, Integer&gt; vars){
    this.vars = vars;
}

public Integer visitConst(int value){
    return value;
}

public Integer visitVariable(String name){
    return vars.get(name);
}

public Integer visitAdd(Integer expr1, Integer expr2){
    return expr1 + expr2;
}

public Integer visitMul(Integer expr1, Integer expr2){
    return expr1 * expr2;
}

public Integer visitNegate(Integer expr){
   return -expr1;
} } ```
</code></pre>

<p>or convert to a string:</p>

<p>```java Stringify.java
class Stringify implements ExprFolder<string> {</string></p>

<pre><code>public String visitConst(int value){
    return "" + value;
}

public String visitVariable(String name){
    return name;
}

public String visitAdd(String expr1, String expr2){
    return "(" + expr1 + " + " + expr2 + ")";
}

public String visitMul(String expr1, String expr2){
    return expr1 + "×" + expr2;
}

public String visitNegate(String expr){
    return "(-" + expr1 + ")";
} } ```
</code></pre>

<p>And so on.</p>

<h2 id="so-is-everything-a-fold">So, is everything a fold?</h2>

<p>In short, not quite.</p>

<p>Some operations, like for example expression optimisation, are not a fold, unless you pick a weird result type. Folds always progress from leaves to the root and never descend back. Optimisation of expression trees, on the other hand, is usually implemented as a descent from the root to the leaves.</p>

<p>In theory though, everything can be implemented as a fold. Please don’t do that though.</p>

<p>Furthermore, folding shown in this post is strict, which means it always descends to the end of a tree before returning back. If the data structure it was traversing was infinite, it would never yield an result.</p>

<h2 id="final-remarks">Final remarks</h2>

<p>First of all, I’d like to thank Bartosz Milewski for a nice write-up on the same topic: 
https://www.fpcomplete.com/user/bartosz/understanding-algebras1111</p>

<p>Second of all, Java is not the best suited programming language for working with algebraic data types. Lack of pattern matching, verbose class declaration syntax, defaulting to equality by reference, defaulting to mutable fields, requiring explicit copying from constructor parameters to fields, and few other things make this pattern bothersome. It works better in other languages though, see for example Milewski’s Haskell examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From explicit nested monads to Kleisli arrows over monad transformers]]></title>
    <link href="http://KarolS.github.io/blog/2014/04/29/from-nested-monads-to-kleisli-arrows-over-monad-transformers/"/>
    <updated>2014-04-29T01:15:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2014/04/29/from-nested-monads-to-kleisli-arrows-over-monad-transformers</id>
    <content type="html"><![CDATA[<p>Recently at work I had a task of developing a small tool that could display charts with progress of our data extraction over time. </p>

<p>After each iteration, results of data extraction were stored in several directories and compared against a handwritten reference set.</p>

<p>In short, this is the directory structure:</p>

<p><code>plain
|--+ batch1
|  |--+ correct
|  |  `--- data.txt
|  |--+ guessed
|  |  |--- data.00000145a8ab68b9.txt
|  |  |--- data.00000145a92a530f.txt
|  |  `--- data.0000014594039f5b.txt
|  |--- input1.pdf
|  |--- input2.pdf
|  `--- input3.pdf
`--+ batch2
   |--+ correct
   |  `--- data.txt
   |--+ guessed
   |  |--- data.00000145a8ab68b9.txt
   |  |--- data.00000145a92a530f.txt
   |  `--- data.0000014594039f5b.txt
   |--- input4.pdf
   |--- input5.pdf
   `--- input6.pdf
</code></p>

<p>The hexadecimal numbers are timestamps in milliseconds since Unix epoch.</p>

<p>Each file consisted of records in the format:</p>

<p><code>plain
input1.pdf value from the first file
input2.pdf value from the second file
input3.pdf value from the third file
</code></p>

<p>Long story short, there was no difference what programming language I would write the tool in, so I picked Haskell. Let’s ignore most details of the implementation. What’s important for this entry, is that I implemented the following functions:</p>

<p>```haskell</p>

<p>allCorrectFiles :: [FilePath]  -&gt; IO [FilePath]
allGuessedFiles :: [FilePath]  -&gt; IO [(LocalTime, FilePath)]
readDataFile :: FilePath -&gt; IO [(Entry, String)]
getAllData :: [FilePath] -&gt; IO ([(Entry, String)], [(LocalTime, Entry, String)])</p>

<p>```</p>

<p>The initial implementation of the <code>getAllData</code> function was straightforward, yet a bit clunky:</p>

<p><code>haskell
getAllData subDirs = do
	correctFiles &lt;- allCorrectFiles subDirs
	guessedFiles &lt;- allGuessedFiles subDirs
	correctData &lt;- mapM readDataFile correctFiles
	guessedData &lt;- forM guessedFiles $ \(t,f) -&gt;
		x &lt;- readDataFile f
		return $ map (\(e,s) -&gt; (t,e,s)) x
	return (concat correctData, concat guessedData)
</code></p>

<p>This code is quite ugly. The especially jarring were the <code>return $ map</code> combination and <code>concat</code>s in the final line.</p>

<p>After a while, I noticed that all the functions I call from the <code>getData</code> function are of type <code>a -&gt; IO [b]</code>. A double monad. So, I added <code>transformers</code> library to my project and rewritten that function as:</p>

<!-- more -->

<p><code>haskell
getAllData subDirs = do
	correctData &lt;- runListT $ do
		f &lt;- ListT $ allCorrectFiles subDirs
		x &lt;- ListT $ readDataFile f
		return x	
	guessedData &lt;- runListT $ do
		(t,f) &lt;- ListT $ allGuessedFiles subDirs
		x &lt;- ListT $ readDataFile f
		return (t, fst x, snd x)
	return (correctData, guessedData)
</code></p>

<p>Now it looks way more uniform.</p>

<p>This was my first piece of code using monad transformers, so I will explain what’s going on to everyone who was in the same situation as me before understanding it.</p>

<p><code>IO</code> is a monad, so is <code>[]</code>. For some monads, if you wrap them in another monad, you still get something that can be used like a monad. One of such monads is <code>[]</code>.</p>

<p>For every monad <code>m</code> and type <code>a</code>, <code>m [a]</code> is a monad over <code>a</code>. But in order for Haskell to treat it as one singular monad, we need to wrap it. And that’s what <code>ListT</code> is for. </p>

<p>So <code>allCorrectFiles subDirs</code> returns <code>IO [FilePath]</code>, and after wrapping it with <code>ListT</code> we get <code>ListT IO FilePath</code>.</p>

<p>This way, we stack our monadic effects: we both iterate over elements of a list, and track impure side effects. If the <code>readDataFile</code> or <code>allGuessedFiles</code> were pure, we would use <code>[]</code> monad. If they were impure, but returned only one element, we’d use <code>IO</code> monad. By wrapping <code>IO [a]</code> into <code>ListT</code>, we can use them both.</p>

<p>Since the results of inner <code>do</code> blocks are now of type <code>ListT IO a</code>, we unwrap them with <code>runListT</code>.</p>

<p>Note that since <code>ListT</code> allowed <code>&lt;-</code> operator to unwrap not only the <code>IO</code> monad, but also the list monad, we didn’t end up with lists of lists and we no longer needed to <code>concat</code> those lists together.</p>

<p>The code got less ugly, but it also got a bit longer. Could I get it shorter?</p>

<p>The answer was yes, but only a teeny tiny bit, and involved some more complicated machinery. Arrows.</p>

<p>The trivial arrow instance for functions is easy to understand: <code>&gt;&gt;&gt;</code> behaves like flipped function composition, and there are several combinators, like <code>&amp;&amp;&amp;</code>, <code>***</code>, <code>first</code> and <code>second</code> that make it easier to work with 2-element tuples. </p>

<p>Since the return value from the <code>allGuessedFiles</code> was a list of 2-element tuples in an IO monad, and I only operated on the second element before fusing them together, I decided to use arrows. Luckily, the <code>base</code> library contains definitions for monadic arrows, which are to <code>&gt;&gt;=</code> as trivial arrows are to <code>.</code>.</p>

<p>The code had to involve even more wrapping and unwrapping. Here it is:</p>

<p><code>haskell
getAllData subDirs = do
	correctData &lt;- runKL subDirs $ 
		kl allCorrectFiles &gt;&gt;&gt; kl readDataFile
	guessedData &lt;- runKL subDirs $ 
		kl allGuessedFiles &gt;&gt;&gt; second (kl readDataFile) &gt;&gt;^ \(a,(b,c)) -&gt; (a,b,c)
	return (correctData, guessedData)
	where 
		kl f = Kleisli $ ListT . f
		runKL x ar = runListT $ runKleisli ar x
</code></p>

<p>Now I do believe I owe you some explanations.</p>

<p>Let’s start with the definition of <code>kl</code>. <code>f</code> is of type <code>a -&gt; m [b]</code>, where <code>m</code> is a monad. After composing it with <code>ListT</code>, we get <code>ListT . f</code> of type <code>a -&gt; ListT m b</code>, where <code>ListT m</code> is a monad now.</p>

<p><code>Kleisli</code> wraps our function into a Kleisli arrow (of type <code>Kleisli (ListT m) a b</code>), so Haskell knows that when we join arrows together, we don’t want to abstract <code>.</code> but <code>&gt;&gt;=</code>. This way, <code>kl f &gt;&gt;&gt; kl g</code> means the same as <code>\x -&gt; f x &gt;&gt;= g</code>, where <code>f &gt;&gt;&gt; g</code> would mean  <code>\x -&gt; (g . f) x</code>.</p>

<p><code>runKL</code> applies our arrow and unwraps the <code>ListT</code> transformer. I reversed the argument order of <code>runKleisli</code> for convenience.</p>

<p>So how is the <code>guessedData</code> calculated? <code>allGuessedFiles</code> returns <code>IO [(LocalTime, FilePath)]</code>. <code>second</code> makes its argument to be applied only to the second argument of the input tuple, so <code>second readDataFile</code> would be of type <code>(a, FilePath) -&gt; IO[(a,(Entry, String))]</code>*, but since we used <code>kl</code>, it’s actually <code>Kleisli (ListT IO) (a, FilePath) (a,(Entry, String))</code>.</p>

<p><em>* Note: I kinda simplified here a bit and technically this type is wrong.</em></p>

<p>The last function, which is a lambda expression, was lifted into a Kleisli arrow with the <code>&gt;&gt;^</code> operator. In case of Kleisli arrows, such lifting is equivalent to <code>\f -&gt; (return . f)</code>. It turns a function of type <code>a-&gt;b</code> into a function of type <code>a -&gt; m b</code> wrapped into a Kleisli.</p>

<p>I also took a peek at the <code>arrow-list</code> package, which provides its own definitions of equivalents for <code>kl</code> and <code>runKL</code>, but I decided to not use it, since it would give little value.</p>

<p><strong>So, was it worth it?</strong></p>

<p>In some sense, yes. I have learnt what monad transformers and Kleisli arrows can be used for. The main problem is that the problem I had to solve was too small for such complex machinery. The transformers made the code more uniform, which allowed application of arrows, while arrows would have made code mode compact if it was more complex.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hOCR4J 0.1 released]]></title>
    <link href="http://KarolS.github.io/blog/2014/01/03/hocr4j-0-1-released/"/>
    <updated>2014-01-03T00:11:00+01:00</updated>
    <id>http://KarolS.github.io/blog/2014/01/03/hocr4j-0-1-released</id>
    <content type="html"><![CDATA[<p>I would like to announce the release of a Java library for parsing hOCR documents: <strong>hOCR4J</strong>. You can <a href="https://github.com/KarolS/hOCR4J">download it from here</a>. I’m planning to get it to Sonatype too, so you may be able to get it from there in the near future.</p>

<p>hOCR is an output format used by OCR programs, including <a href="http://code.google.com/p/tesseract-ocr">Tesseract</a>. It contains information about all the OCR’d words, their position, and their assumed organisation into lines and paragraphs. Currently, hOCR4J was tested to work with Tesseract-generated hOCR’s, I plan to test other OCR programs in the future.</p>

<p>hOCR4J parses hOCR documents, creates an immutable model for them (nice when using functional programming style), and provides various tools to manipulate and modify them.</p>

<p>hOCR4J makes a good starting point when developing an application which extracts data from OCR’d documents that have non-trivial layouts.</p>

<!-- more -->

<p>The model of an hOCR document is simple: a page contains areas, an area contains paragraphs, a paragraph contains lines, a line contains words. Each of these objects has a bounding box, which defines its position on the scanned page. hOCR4J provides various operations on bounding boxes in the <code>Bounds</code> class, including scaling, resizing, translating, unions, intersections, and more.</p>

<p>Using hOCR4J is also simple. First, we need to get our hOCR file and read the hOCR into a string. Then we can parse it:</p>

<p>```java
String hocr = … ; // load hOCR here</p>

<p>List<page> pages = HocrParser.parse(hocr);</page></p>

<p>Page page0 = pages.get(0);
```</p>

<p>We can now extract some text:</p>

<p><code>java
List&lt;String&gt; textLines = page0.getAllLinesAsStrings();
</code></p>

<p>We can only extract lines that satisfy some conditions:</p>

<p>```java
List<line> lines = page0.findAllLines(LineThat.matchesRegex("^IMPORTANT:"));</line></p>

<p>for (Line line: lines){
  String text = line.mkString();
  // …
}
```</p>

<p>We can look for words in italics:</p>

<p>```java
List<word> words = page0.getAllWords();</word></p>

<p>for (Word word: words){
  if (word.isItalic()){
    String w = word.getText();
    // …
  }
}
```</p>

<p>We can look for location of a word or phrase (spaces are ignored, as OCR sometimes inserts more or less of them):</p>

<p>```java
// let’s censor the name of the culprit
Page censoredPage = page0.mapLines(new Function&lt;Line,Line&gt;(){
  public Line apply(Line line){</p>

<pre><code>// we check if the line mentions culprit's name
final Bounds theCulpritIs = line.findBoundsOfWord("The culprit is");

if (theCulpritIs != null) {
  // we take bounds of the entire line
  Bounds full = line.getBounds();

  // and we calculate bounds of a line
  // that doesn't extend beyond words "The culprit is"
  Bounds remain = new Bounds(
    full.getLeft(), 
    full.getTop(), 
    theCulpritIs.getRight(), 
    full.getBottom());

  // finally, we trim our line
  return line.createBounded(remain);
} else {
  // all the other lines are left unmodified
  return line;
}   } });
</code></pre>

<p>return censoredPage;
```</p>

<p>In the near future, I’m planning a tutorial on extracting text columns from hOCR using hOCR4J.</p>
]]></content>
  </entry>
  
</feed>
