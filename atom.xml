<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Karol Stasiak's Blog]]></title>
  <link href="http://KarolS.github.io/atom.xml" rel="self"/>
  <link href="http://KarolS.github.io/"/>
  <updated>2014-04-29T01:21:22+02:00</updated>
  <id>http://KarolS.github.io/</id>
  <author>
    <name><![CDATA[Karol Stasiak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Random ideas for Scala 3.0]]></title>
    <link href="http://KarolS.github.io/blog/2014/04/29/random-ideas-for-scala-3-0/"/>
    <updated>2014-04-29T01:22:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2014/04/29/random-ideas-for-scala-3-0</id>
    <content type="html"><![CDATA[<p>Here comes a list of things that I would love to see in Scala 3.0. Some of them are breaking changes, hence 3.0 not 2.13 or anything like that. Some of them are about the compiler, some of them are about the library, some of them are about the external tools. Some of those ideas are different solutions for the same problem.</p>

<!-- more -->

<h3 id="syntax">Syntax</h3>

<ul>
  <li>
    <p>Treating number literals with leading zeroes as decimal (with a warning for a version or two).</p>
  </li>
  <li>
    <p>Binary and octal literals in forms of <code>0b01010101</code> and <code>0o037</code>.</p>
  </li>
  <li>
    <p>Underscores in numeric literals: <code>1_000_000</code>.</p>
  </li>
  <li>
    <p>Some kind of byte array literal.</p>
  </li>
  <li>
    <p><code>BigInt</code> and <code>BigDecimal</code> literals: <code>100000000000000000000000000000000000N</code>, <code>0.01m</code></p>
  </li>
  <li>
    <p><code>Short</code> and <code>Byte</code> literals, both accepting both signed and unsigned values: <code>20000s</code>, <code>255y</code></p>
  </li>
  <li>
    <p>Removal of XML literals and an <code>xml</code> macro string context as a replacement: <code>xml"&lt;p&gt;Hello $world&lt;/p&gt;"</code></p>
  </li>
  <li>
    <p>Introducing true <code>break</code>, <code>continue</code> and <code>goto</code>.</p>
  </li>
  <li>
    <p>A special syntax for monads, like Haskell’s <code>do</code>.</p>

    <ul>
      <li>
        <p><code>do</code> is already a keyword, it can cause problems with <code>do...while</code> loops.</p>
      </li>
      <li>
        <p><code>for</code> is clunky, especially when it comes to <code>if...else</code>. Maybe fix <code>for</code>?</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="standard-library">Standard library</h3>

<ul>
  <li>
    <p>Clean-up of the collections. Currently, the standard collections are a little mess. I think <a href="http://www.slideshare.net/extempore/a-scala-corrections-library">Paul Phillips sums it up nicely</a>.</p>
  </li>
  <li>
    <p>Standard <code>scala-time</code> library, being a wrapper for both Joda Time and Java 8 Time API.</p>

    <ul>
      <li>There would be two functionally identical implementations.</li>
    </ul>
  </li>
  <li>
    <p>HLists.</p>
  </li>
  <li>
    <p>Vectors with length known at compile-time.</p>
  </li>
  <li>
    <p>A macro that includes C header files on compile time and generates corresponding JNA interfaces.</p>
  </li>
  <li>
    <p>Removal of <code>/:</code> and <code>:\</code> methods.</p>
  </li>
  <li>
    <p>A clone of .NET’s <code>dynamic</code> type.</p>
  </li>
  <li>
    <p><code>String.toInt</code> and friends accepting a base.</p>
  </li>
  <li>
    <p>A <code>^</code> operator for sets, returning the symmetric difference.</p>
  </li>
</ul>

<h3 id="value-classes">Value classes</h3>

<ul>
  <li>
    <p>Specialization for custom value classes.</p>
  </li>
  <li>
    <p>Generating specialized classes on the fly by the compiler (so the compiler would take an existing class, either ours or from an external library, and specialize it).</p>

    <ul>
      <li>This would allow to specialize collections.</li>
    </ul>
  </li>
  <li>
    <p>Unboxed arrays for custom value classes.</p>
  </li>
  <li>
    <p>Different name mangling for methods taking value classes.</p>

    <ul>
      <li>Currently, if you have <code>class A(x: Int) extends AnyVal</code>, <code>class B(x: Int) extends AnyVal</code> and try to write both <code>def method(a: A)</code> and <code>def method(b: B)</code>, you get an error.</li>
    </ul>
  </li>
  <li>
    <p>Multi-field value classes.</p>

    <ul>
      <li>
        <p>This could work as following: if the value is a field, a local variable, or a parameter, use several variables. If it’s a return value, box it.</p>
      </li>
      <li>
        <p>This of course wouldn’t improve performance much, unless there would be an alternative way to return such values.</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="type-system">Type system</h3>

<ul>
  <li>
    <p>Almost full type inference for private and local functions and variables.</p>
  </li>
  <li>
    <p>Built-in type-level integers, booleans and strings, with some operations on them.</p>
  </li>
  <li>
    <p>Compile-time null safety – detection of provable paths that could potentially lead to NPE’s.</p>
  </li>
  <li>
    <p>Multimethods.</p>
  </li>
</ul>

<h3 id="fixing-minor-annoyances">Fixing minor annoyances</h3>

<ul>
  <li>
    <p>Adding Scalaz’s <code>some</code> and <code>none</code>.</p>
  </li>
  <li>
    <p>Adding Scalaz’s <code>Equal</code> and <code>Monoid</code> typeclasses.</p>
  </li>
  <li>
    <p><code>@adt</code> annotation on a trait would make the generated <code>apply</code> method of companion objects of case classes that implement that trait return that trait.</p>

    <ul>
      <li>
        <p>For example, annotating <code>Option</code> with <code>@adt</code> and writing <code>var x = Some(1)</code> would make <code>x</code> of type <code>Option[Int]</code>, not <code>Some[Int]</code>.</p>
      </li>
      <li>
        <p>It would be nice to make it somehow work with case objects, especially in polymorphic cases, like with <code>Option</code> and <code>None</code>, or <code>Either</code> and either <code>Left</code> or <code>Right</code> (either of these fixes only one type parameter, not two).</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Ignoring missing annotation definitions in external libraries.</p>
  </li>
  <li>
    <p>Allowing for creating annotations with runtime retention in Scala.</p>
  </li>
</ul>

<h3 id="tooling">Tooling</h3>

<ul>
  <li>
    <p>A decent, officially supported Findbugs plugin.</p>
  </li>
  <li>
    <p>A configurable style checker, preferably including <a href="http://www.scala-lang.org/old/node/8610">“powerlevels”</a>.</p>
  </li>
  <li>
    <p>A Java-to-idiomatic-Scala converter.</p>
  </li>
  <li>
    <p>A Scala-to-idiomatic-Java converter.</p>
  </li>
  <li>
    <p>Easier developing for Android.</p>

    <ul>
      <li>
        <p>Built-in Proguard-like optimizer?</p>
      </li>
      <li>
        <p>Dalvik backend?</p>
      </li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing catamorphisms in Java]]></title>
    <link href="http://KarolS.github.io/blog/2014/04/29/implementing-catamorphisms-in-java/"/>
    <updated>2014-04-29T01:20:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2014/04/29/implementing-catamorphisms-in-java</id>
    <content type="html"><![CDATA[<p><em>Warning: I’m now going to wake up the ghosts of the past. The past which includes your undergraduate abstract algebra lectures.</em></p>

<p>This post is mostly a result of my boredom and my willingness to show that you can shoehorn almost every abstraction into almost every programming language, but it’s not exactly the best idea to do so.</p>

<p>Also, I simply wanted to say a word or two about several abstract mathematical concepts. It can be a worthwhile intellectual exercise.</p>

<h2 id="algebras">Algebras</h2>

<p>Before I talk about catamorphisms, mentioned in the title, I’d like to have a look at a very abstract and general mathematical structure: an algebra.</p>

<p>An <strong>algebra</strong> is a tuple that contains:</p>

<ul>
  <li>
    <p>some sets (called carrier sets), most often one</p>
  </li>
  <li>
    <p>usually some operations, each of them from some Cartesian product of the carrier sets to one of the carrier sets</p>
  </li>
  <li>
    <p>sometimes some distinguished elements from those sets (they’re often superfluous, but they will be required later; you can also think about them as of nullary operations)</p>
  </li>
</ul>

<p>Examples: </p>

<ul>
  <li>
    <p>a set of strings <code>Str</code> and the operation of concatenation <code>+: Str × Str → Str</code></p>
  </li>
  <li>
    <p>a set of natural numbers <code>Nat</code> and the operation of addition: <code>+: Nat × Nat → Nat</code></p>
  </li>
  <li>
    <p>a set of finite subsets of natural numbers <code>Nat</code> and a set of natural numbers <code>P(Nat)</code>, a distinguished empty set <code>Ø</code> and the operations of union and intersection <code>P(Nat) × P(Nat) → P(Nat)</code> and the largest element operation <code>max: P(Nat) → Nat</code> (with <code>max(Ø) = 0</code>)</p>
  </li>
</ul>

<p><em>Note: I’m using the <code>+</code> operator for string concatenation because the article is supposed to end up with creating some Java code, and Java uses <code>+</code> for string concatenation.</em></p>

<!-- more -->

<p>Usually when talking about an algebra, one specifies properties those operations have, for example concatenation is associative, addition is commutative and associative, and so on.</p>

<p>When you look at it, an algebra can be considered equivalent to a program in a statically typed functional language. </p>

<h2 id="homomorphisms">Homomorphisms</h2>

<p>The second important thing we need are algebra homomorphisms. Let’s assume we have two algebras <code>A₁</code> and <code>A₂</code> with the following properties:</p>

<ul>
  <li>
    <p>They have the same number of carrier sets, e.g. <code>X₁, Y₁, Z₁</code> and <code>X₂, Y₂, Z₂</code>.</p>
  </li>
  <li>
    <p>They have the same number of distinguished elements from the corresponding carriers sets, e.g. <code>ε₁ ∈ X₁, α₁ ∈ Y₁, β₁ ∈ Y₁</code> and <code>ε₂ ∈ X₂, α₂ ∈ Y₂, β₂ ∈ Y₂</code>.</p>
  </li>
  <li>
    <p>They have the same number of operations from the correspoding carriers sets to the corresponding carrier sets, e.g. <code>f₁: X₁×Y₁→Y₁, g₁: Y₁×Y₁→Y₁, h₁: X₁×X₁→X₁, k₁: Y₁→Z₁</code> and <code>f₂: X₂×Y₂→Y₂, g₂: Y₂×Y₂→Y₂, h₂: X₂×X₂→X₂, k₂: Y₂→Z₂</code>.</p>
  </li>
</ul>

<p>I’ll be calling such pairs of algebras <strong>algebras with matching signatures</strong>.</p>

<p>Now if we have a function <code>H</code> from carrier sets of one algebra to carriers sets of another algebra, and that function preserves the algebraic structure, e.g. in the example from above:</p>

<ul>
  <li>
    <p><code>H: (X₁ ∪ Y₁ ∪ Z₁) → (X₂ ∪ Y₂ ∪ Z₂)</code></p>
  </li>
  <li>
    <p><code>H(ε₁) = ε₂</code>, <code>H(α₁) = α₂</code>, <code>H(β₁) = β₂</code></p>
  </li>
  <li>
    <p><code>H(f₁(x,y)) = f₂(H(x), H(y))</code>, <code>H(g₁(y,y')) = g₂(H(y), H(y'))</code>, <code>H(h₁(x,x')) = h₂(H(x), H(x'))</code>, <code>H(k₁(y)) = k₂(H(y))</code></p>
  </li>
</ul>

<p>then we call <code>H</code> a <strong>homomorphism</strong>.</p>

<p>You probably need an example. I’ll start with a simple one: the two first algebras I mentioned have a homomorphism between them: the length. Indeed, <code>length(str₁ + str2) = length(str₁) + length(str₂)</code>. </p>

<p>There’s also a homomorphism back, let’s call it <code>aaaa</code>, which for a given natural number returns a string made of that number of a’s, e.g. <code>aaaa(3) = "aaa"</code>. You can easy see that <code>aaaa(n₁ + n₂) = aaaa(n₁) + aaaa(n₂)</code>.</p>

<p><em>Note: You have probably noticed, that instead of performing calculations on some operands in one algebra and finally converting the result to another algebra using a homomorphism, we can first convert the result to the second algebra and then perform the calculations. Indeed that is correct and usually it’s useful, especially if the operations in the second algebra are easier to perform. Haskell library <a href="https://github.com/mikeizbicki/HLearn">HLearn</a> converts an algebra of data samples to an algebra of statistics, allowing for instantaneous recalculating of statistics after adding some data to an enormous sample.</em></p>

<p>If the homomorphism is invertible, i.e. there is a homomorphism <code>K</code> from the second algebra back to the first, and <code>K(H(x)) = x</code> and <code>H(K(y)) = y</code>, then we call <code>H</code> an <strong>isomorphism</strong> and the two algebras <strong>isomorphic</strong>. Two isomorphic algebras can be considered equivalent for most purposes.</p>

<p>Since <code>length</code> and <code>aaaa</code> don’t have that property (<code>aaaa(length("b")) = "a" ≠ "b"</code>), nor any other pair of homomorphisms does, the algebra of strings with concatenation and the algebra of natural numbers with addition are not isomorphic.</p>

<h2 id="initial-algebras">Initial algebras</h2>

<p>A special category of algebras are <strong>initial algebras</strong>. Their carrier sets are not given, but are defined from the given distinguished elements and operations. For example, the carrier set <code>X</code> for an initial algebra with distinguished element <code>Z ∈ X</code> and unary operation <code>S: X → X</code> is <code>{Z, S(Z), S(S(Z)), S(S(S(Z))), S(S(S(S(Z))))...}</code>. Operations in initial algebras are not commutative nor associative, but they are always injective. They’re sometimes called <strong>constructors</strong>, and like the constructors in programming languages, they always construct new, distinct values. When initial algebras are implemented, they’re usually called <strong>algebraic data structures</strong>.</p>

<p>Let’s implement the above initial algebra in Java:</p>

<figure class="code"><figcaption>X.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">X</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>Z.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Z</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">Z</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>S.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">S</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">  <span class="kd">public</span> <span class="kd">final</span> <span class="n">X</span> <span class="n">field1</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">  <span class="kd">public</span> <span class="nf">S</span><span class="o">(</span><span class="n">X</span> <span class="n">param1</span><span class="o">){</span>
</div><div class="line">      <span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">param1</span><span class="o">;</span>
</div><div class="line">  <span class="o">}</span>
</div><div class="line"> </div><div class="line">  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">      <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">S</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">S</span><span class="o">)</span><span class="n">o</span><span class="o">).</span><span class="na">field1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">field1</span><span class="o">);</span>
</div><div class="line">  <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p><em>Note: Implementing <code>hashCode</code>, providing null-safety and adding getters left as an exercise for the reader.</em></p>

<h2 id="catamorphisms">Catamorphisms</h2>

<p>The nice thing about the initial algebras is that for every algebra with a matching signature, there exists exactly one homomorphism from initial algebra to the given algebra. That unique homomorphism is called the <strong>catamorphism</strong>.</p>

<p>For example, given the algebra above, we can uniquely map it onto an algebra with natural numbers, number <code>0</code>, and function <code>x → x + 1</code>: <code>H(Z) → 0</code>, <code>H(S(x)) → H(x) + 1</code>. While it may look tautological, keep in mind that the elements of the carrier set of an initial algebra are uniquely defined by the distinguished elements and operations that were used to create them.</p>

<p>Let’s implement it in Java!</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">h</span><span class="o">(</span><span class="n">X</span> <span class="n">x</span><span class="o">){</span>
</div><div class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="k">instanceof</span> <span class="n">Z</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="k">instanceof</span> <span class="n">S</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">return</span> <span class="nf">h</span><span class="o">(((</span><span class="n">S</span><span class="o">)</span><span class="n">x</span><span class="o">).</span><span class="na">field1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</div><div class="line">    <span class="k">else</span> <span class="o">{</span>
</div><div class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>It works, but it’s ugly.</p>

<h2 id="pattern-matching-sort-of">Pattern matching… sort of</h2>

<p>Let’s take another look at our homomorphism in Java. The code has several issues:</p>

<ul>
  <li>
    <p>it explicitly checks type and casts the parameter;</p>
  </li>
  <li>
    <p>it calls itself recursively;</p>
  </li>
  <li>
    <p>it has this ugly unreachable code that will suddenly start throwing exceptions when we add another constructor to our <code>X</code> algebra.</p>
  </li>
</ul>

<p>Let’s address #1 and #3 first.</p>

<p>If we were using a functional language with first-class support for algebraic data types, we could write our homomorphism using pattern matching:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div></pre></td><td class="main  fsharp"><pre><div class="line"><span class="k">let</span> <span class="nv">h</span> <span class="n">x</span> <span class="o">=</span>
</div><div class="line">  <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</div><div class="line">  <span class="o">|</span> <span class="n">Z</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</div><div class="line">  <span class="o">|</span> <span class="n">S</span> <span class="n">field1</span> <span class="o">-&gt;</span> <span class="n">h</span> <span class="n">field1</span> <span class="o">+</span> <span class="mi">1</span>
</div></pre></td></tr></table></div></figure>

<p>Java does not support pattern matching, that’s obvious and furthermore, the alternative solution using explicit casts is ugly and prone to bugs. To solve it in Java, the officially preferred way is to use the visitor pattern.</p>

<figure class="code"><figcaption>XVisitor.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">      <span class="n">T</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Z</span> <span class="n">z</span><span class="o">);</span>
</div><div class="line">      <span class="n">T</span> <span class="nf">visit</span><span class="o">(</span><span class="n">S</span> <span class="n">s</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>X.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">X</span> <span class="o">{</span>
</div><div class="line">      <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>Z.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Z</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">Z</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>S.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">S</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kd">final</span> <span class="n">X</span> <span class="n">field1</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="nf">S</span><span class="o">(</span><span class="n">X</span> <span class="n">param1</span><span class="o">){</span>
</div><div class="line">        <span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">param1</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">S</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">S</span><span class="o">)</span><span class="n">o</span><span class="o">).</span><span class="na">field1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">field1</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">visitor</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>H.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">H</span> <span class="kd">implements</span> <span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">visitZ</span><span class="o">(</span><span class="n">Z</span> <span class="n">z</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">visit</span><span class="o">(</span><span class="n">S</span> <span class="n">s</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">field1</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p><em>Note: As you can see, it’s not the typical Visitor pattern as described by the Gang of Four. First, here the <code>visit</code> methods actually return something instead of returning <code>void</code>, second, GoF suggests that the branching classes, like <code>S</code> here, always had the visitor visit their children and express that in the <code>S.visit</code> method.</em></p>

<p>Since the only thing we need from the instances of our classes is values of their fields, we can simplify it further:</p>

<figure class="code"><figcaption>XVisitor.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="n">T</span> <span class="nf">visitZ</span><span class="o">();</span>
</div><div class="line">    <span class="n">T</span> <span class="nf">visitS</span><span class="o">(</span><span class="n">X</span> <span class="n">field1</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>X.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">X</span> <span class="o">{</span>
</div><div class="line">    <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>Z.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Z</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">Z</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">visitor</span><span class="o">.</span><span class="na">visitZ</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>S.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">S</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kd">final</span> <span class="n">X</span> <span class="n">field1</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="nf">S</span><span class="o">(</span><span class="n">X</span> <span class="n">param1</span><span class="o">){</span>
</div><div class="line">        <span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">param1</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">S</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">S</span><span class="o">)</span><span class="n">o</span><span class="o">).</span><span class="na">field1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">field1</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">visitor</span><span class="o">.</span><span class="na">visitS</span><span class="o">(</span><span class="n">field1</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>H.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">H</span> <span class="kd">implements</span> <span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">visitZ</span><span class="o">(){</span>
</div><div class="line">        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">visitS</span><span class="o">(</span><span class="n">X</span> <span class="n">field1</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">field1</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>Looks way better. Too enterprisy for my taste, but hey, it’s Java.</p>

<p>The upside of this new approach is that whenever we add a new class implementing our base interface, the compiler will kick and scream until we fix our visitors.</p>

<p>The downside is that we still have to call <code>visit</code> in <code>visitS</code>. The burden of converting <code>field1</code> to <code>T</code> should be on the <code>S</code> class. The visitor interface should be decoupled from the <code>X</code> interface. Let’s try a bit harder.</p>

<h2 id="catamorphisms-and-visitors-take-two">Catamorphisms and visitors, take two</h2>

<p>Let’s have a look at our simple algebra so far:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">X</span><span class="o">:</span>
</div><div class="line">    <span class="n">Z</span><span class="o">()</span>
</div><div class="line">    <span class="n">S</span><span class="o">(</span><span class="n">X</span> <span class="n">param1</span><span class="o">)</span>
</div></pre></td></tr></table></div></figure>

<p>As you can see, it’s recursive. That means it’s also infinite.</p>

<p>Let’s get rid of the recursion somehow. What happens if we replace X with some type parameter T?</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">XPrecursor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;:</span>
</div><div class="line">    <span class="n">ZPrecursor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;()</span>
</div><div class="line">    <span class="n">SPrecursor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">T</span> <span class="n">param1</span><span class="o">)</span>
</div></pre></td></tr></table></div></figure>

<p>(Sorry for weird syntax.)</p>

<p>As you can see, our algebra is no longer recursive. (It can still be infinite though, for example if some constructors use another infinite types.) Such family of non-recursive algebras is called the <strong>precursor</strong> of our initial algebra <code>X</code>. All algebras in this family are also initial.</p>

<p><em>Note: <code>XPrecursor&lt;X&gt;</code> is isomorphic to <code>X</code>. Here are the homomorphisms both ways:</em></p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="n">X</span> <span class="nf">fromPrecursor</span><span class="o">(</span><span class="n">XPrecursor</span><span class="o">&lt;</span><span class="n">X</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">){</span>
</div><div class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="k">instanceof</span> <span class="n">ZPrecursor</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">Z</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="k">instanceof</span> <span class="n">SPrecursor</span> <span class="o">{</span>
</div><div class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">S</span><span class="o">(((</span><span class="n">SPrecursor</span><span class="o">&lt;</span><span class="n">X</span><span class="o">&gt;)</span><span class="n">p</span><span class="o">).</span><span class="na">param1</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</div><div class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div><div class="line"> </div><div class="line"><span class="n">XPrecursor</span> <span class="nf">toPrecursor</span><span class="o">(</span><span class="n">X</span> <span class="n">x</span><span class="o">){</span>
</div><div class="line">    <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="k">instanceof</span> <span class="n">Z</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">ZPrecursor</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="k">instanceof</span> <span class="n">X</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">return</span> <span class="k">new</span> <span class="n">SPrecursor</span><span class="o">&lt;</span><span class="n">X</span><span class="o">&gt;(((</span><span class="n">S</span><span class="o">)</span><span class="n">x</span><span class="o">).</span><span class="na">param1</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</div><div class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>How would a visitor for <code>XPrecursor&lt;T&gt;</code> look like?</p>

<figure class="code"><figcaption>XPrecursorVisitor.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">XPrecursorVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="n">U</span> <span class="nf">visitZ</span><span class="o">();</span>
</div><div class="line">    <span class="n">U</span> <span class="nf">visitS</span><span class="o">(</span><span class="n">T</span> <span class="n">field1</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p><em>Note: Since <code>XPrecursor&lt;T&gt;</code> is not recursive, the visitor does not have to know anything about <code>XPrecursor&lt;T&gt;</code>.</em></p>

<p><em>Note: Remember: every <code>XPrecursorVisitor&lt;T,U&gt;</code> defines a homomorphism <code>XPrecursor&lt;T&gt; → U</code>.</em></p>

<p>And finally: can we convert an <code>XPrecursorVisitor&lt;T,T&gt;</code> into an <code>XVisitor&lt;T&gt;</code>? The answer is yes:</p>

<figure class="code"><figcaption>XCata.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">XCata</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">XVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">XPrecursorVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">underlying</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="nf">XCata</span><span class="o">(</span><span class="n">XPrecursorVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">u</span><span class="o">){</span>
</div><div class="line">        <span class="n">underlying</span> <span class="o">=</span> <span class="n">u</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">visitZ</span><span class="o">(){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">underlying</span><span class="o">.</span><span class="na">visitZ</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">visitS</span><span class="o">(</span><span class="n">X</span> <span class="n">x</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">underlying</span><span class="o">.</span><span class="na">visitS</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>Now, let’s sum all that we know:</p>

<ul>
  <li>
    <p><code>X</code> is an initial algebra</p>
  </li>
  <li>
    <p>for every <code>T</code>, <code>XPrecursor&lt;T&gt;</code> is an initial algebra</p>
  </li>
  <li>
    <p>for every homomorphism <code>f: XPrecursor&lt;T&gt; → T</code> (which means <code>XPrecursorVisitor&lt;T,T&gt;</code>) exist at least one homomorphism <code>g: X → T</code> (which means <code>XVisitor&lt;T&gt;</code>), and only one that doesn’t incorporate any external constants into it</p>
  </li>
</ul>

<p>As some of you may have noticed, I called the converter <code>XCata</code>. Indeed, if we think of the <code>XPrecursorVisitor&lt;T,T&gt;</code> as of an algebra over <code>T</code> (where the methods represent the distinguished elements if zero parameters and the operations if not), <code>XCata</code> is the catamorphism from initial algebra <code>X</code> to the <code>T</code> algebra.</p>

<p>Armed with this knowledge, we can add <code>&lt;T&gt; T visit(XPrecursorVisitor&lt;T&gt; visitor)</code> to our X interface and inline the methods of <code>XCata</code> in the implementations of the new method:</p>

<figure class="code"><figcaption>X.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">X</span> <span class="o">{</span>
</div><div class="line">    <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XPrecursorVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>Z.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Z</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">Z</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XPrecursorVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">visitor</span><span class="o">.</span><span class="na">visitZ</span><span class="o">();</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>S.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">S</span> <span class="kd">implements</span> <span class="n">X</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kd">final</span> <span class="n">X</span> <span class="n">field1</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="nf">S</span><span class="o">(</span><span class="n">X</span> <span class="n">param1</span><span class="o">){</span>
</div><div class="line">        <span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">param1</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">S</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">S</span><span class="o">)</span><span class="n">o</span><span class="o">).</span><span class="na">field1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">field1</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">visit</span><span class="o">(</span><span class="n">XPrecursorVisitor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">visitor</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">visitor</span><span class="o">.</span><span class="na">visitS</span><span class="o">(</span><span class="n">field1</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="n">visitor</span><span class="o">));</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<h2 id="some-more-initial-algebra-examples">Some more initial algebra examples</h2>

<p>Before we continue, we will need some more examples. Here are some unfinished Java snippets:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div><div data-line="20" class="line-number"></div><div data-line="21" class="line-number"></div><div data-line="22" class="line-number"></div><div data-line="23" class="line-number"></div><div data-line="24" class="line-number"></div><div data-line="25" class="line-number"></div><div data-line="26" class="line-number"></div><div data-line="27" class="line-number"></div><div data-line="28" class="line-number"></div><div data-line="29" class="line-number"></div><div data-line="30" class="line-number"></div><div data-line="31" class="line-number"></div><div data-line="32" class="line-number"></div><div data-line="33" class="line-number"></div><div data-line="34" class="line-number"></div><div data-line="35" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="c1">// a binary tree with leaves containing values of type T</span>
</div><div class="line"><span class="kd">interface</span> <span class="nc">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="kd">class</span> <span class="nc">Leaf</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="n">Leaf</span><span class="o">(</span><span class="n">T</span> <span class="n">leaf</span><span class="o">){</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="kd">class</span> <span class="nc">Branch</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="n">Branch</span><span class="o">(</span><span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">tree</span><span class="o">,</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="c1">// a simple integer arithmetic expression tree with both variables and constants</span>
</div><div class="line"><span class="kd">interface</span> <span class="nc">Expression</span> <span class="o">{</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="kd">class</span> <span class="nc">Variable</span> <span class="kd">extends</span> <span class="n">Expression</span> <span class="o">{</span>
</div><div class="line">    <span class="n">Variable</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="kd">class</span> <span class="nc">Constant</span> <span class="kd">extends</span> <span class="n">Expression</span> <span class="o">{</span>
</div><div class="line">    <span class="n">Constant</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">){</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="kd">class</span> <span class="nc">Add</span> <span class="kd">extends</span> <span class="n">Expression</span> <span class="o">{</span>
</div><div class="line">    <span class="n">Add</span><span class="o">(</span><span class="n">Expression</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">Expression</span> <span class="n">expr2</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="kd">class</span> <span class="nc">Multiply</span> <span class="kd">extends</span> <span class="n">Expression</span> <span class="o">{</span>
</div><div class="line">    <span class="n">Multiply</span><span class="o">(</span><span class="n">Expression</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">Expression</span> <span class="n">expr2</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line"><span class="o">...</span>
</div><div class="line"> </div><div class="line"><span class="kd">class</span> <span class="nc">Negate</span> <span class="kd">extends</span> <span class="n">Expression</span> <span class="o">{</span>
</div><div class="line">    <span class="n">Negate</span><span class="o">(</span><span class="n">Expression</span> <span class="n">expr</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line"><span class="o">...</span>
</div></pre></td></tr></table></div></figure>

<p>In fact, trees and expressions are the most common examples discussed in articles on similar topics.</p>

<h2 id="where-the-heck-to-use-all-that-theoretical-mumbo-jumbo">Where the heck to use all that theoretical mumbo-jumbo?</h2>

<p><a href="http://en.wikipedia.org/wiki/Catamorphism">Wikipedia says</a> that functional programmers refer to catamorphisms as <em>folds</em>. Every time you have some recursive datatype, usually tree-like or list-like, <em>folding</em> takes such large value and folds it into some nice, small, single value. It does that by looking only at the nearest neighbourhood: the already folded child nodes and the type and other fields of the current node.</p>

<p>From now on, I’ll call things I called PrecursorVisitors before, Folders.</p>

<p>Given the tree defined above, how would a folder for a <code>Tree&lt;T&gt;</code> look like?</p>

<figure class="code"><figcaption>TreeFolder.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">TreeFolder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="n">U</span> <span class="nf">visitLeaf</span><span class="o">(</span><span class="n">T</span> <span class="n">leaf</span><span class="o">);</span>
</div><div class="line"> </div><div class="line">    <span class="n">U</span> <span class="nf">visitBranch</span><span class="o">(</span><span class="n">U</span> <span class="n">left</span><span class="o">,</span> <span class="n">U</span> <span class="n">right</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>And it’s used like this:</p>

<figure class="code"><figcaption>Tree.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">fold</span><span class="o">(</span><span class="n">TreeFolder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">folder</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>Leaf.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">Leaf</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">final</span> <span class="n">T</span> <span class="n">leaf</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">    <span class="n">Leaf</span><span class="o">(</span><span class="n">T</span> <span class="n">leaf</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">this</span><span class="o">.</span><span class="na">leaf</span> <span class="o">=</span> <span class="n">leaf</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">U</span> <span class="n">fold</span><span class="o">(</span><span class="n">TreeFolder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">folder</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">return</span> <span class="n">folder</span><span class="o">.</span><span class="na">visitLeaf</span><span class="o">(</span><span class="n">leaf</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>Branch.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">Branch</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">final</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">;</span>
</div><div class="line">    <span class="kd">final</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">    <span class="n">Branch</span><span class="o">(</span><span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">,</span> <span class="n">Tree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
</div><div class="line">        <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">U</span> <span class="n">fold</span><span class="o">(</span><span class="n">TreeFolder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">folder</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">        <span class="k">return</span> <span class="n">folder</span><span class="o">.</span><span class="na">visitBranch</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">fold</span><span class="o">(</span><span class="n">folder</span><span class="o">),</span> <span class="n">right</span><span class="o">.</span><span class="na">fold</span><span class="o">(</span><span class="n">folder</span><span class="o">));</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>What can you use it for? For example, to get the leftmost element of the tree:</p>

<figure class="code"><figcaption>Leftmost.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">Leftmost</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">TreeFolder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">U</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">visitLeaf</span><span class="o">(</span><span class="n">T</span> <span class="n">leaf</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">leaf</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">visitBranch</span><span class="o">(</span><span class="n">T</span> <span class="n">left</span><span class="o">,</span> <span class="n">T</span> <span class="n">right</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>Or count leaves:</p>

<figure class="code"><figcaption>CountLeaves.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">LeftMost</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">TreeFolder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">visitLeaf</span><span class="o">(</span><span class="n">T</span> <span class="n">leaf</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">visitBranch</span><span class="o">(</span><span class="n">Integer</span> <span class="n">left</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">right</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>As for the expressions, evaluating them is one way of folding them:</p>

<figure class="code"><figcaption>ExprFolder.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">interface</span> <span class="nc">ExprFolder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="n">T</span> <span class="nf">visitConst</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">);</span>
</div><div class="line">    <span class="n">T</span> <span class="nf">visitVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span>
</div><div class="line">    <span class="n">T</span> <span class="nf">visitAdd</span><span class="o">(</span><span class="n">T</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">T</span> <span class="n">expr2</span><span class="o">);</span>
</div><div class="line">    <span class="n">T</span> <span class="nf">visitMul</span><span class="o">(</span><span class="n">T</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">T</span> <span class="n">expr2</span><span class="o">);</span>
</div><div class="line">    <span class="n">T</span> <span class="nf">visitNegate</span><span class="o">(</span><span class="n">T</span> <span class="n">expr</span><span class="o">);</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<figure class="code"><figcaption>Evaluate.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div><div data-line="20" class="line-number"></div><div data-line="21" class="line-number"></div><div data-line="22" class="line-number"></div><div data-line="23" class="line-number"></div><div data-line="24" class="line-number"></div><div data-line="25" class="line-number"></div><div data-line="26" class="line-number"></div><div data-line="27" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">Evaluate</span> <span class="kd">implements</span> <span class="n">ExprFolder</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">vars</span><span class="o">;</span>
</div><div class="line"> </div><div class="line">    <span class="n">Evaluate</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">vars</span><span class="o">){</span>
</div><div class="line">        <span class="k">this</span><span class="o">.</span><span class="na">vars</span> <span class="o">=</span> <span class="n">vars</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">visitConst</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">visitVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">vars</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">visitAdd</span><span class="o">(</span><span class="n">Integer</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">expr2</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">expr1</span> <span class="o">+</span> <span class="n">expr2</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">visitMul</span><span class="o">(</span><span class="n">Integer</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">expr2</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">expr1</span> <span class="o">*</span> <span class="n">expr2</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">visitNegate</span><span class="o">(</span><span class="n">Integer</span> <span class="n">expr</span><span class="o">){</span>
</div><div class="line">       <span class="k">return</span> <span class="o">-</span><span class="n">expr1</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>or convert to a string:</p>

<figure class="code"><figcaption>Stringify.java</figcaption><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div><div data-line="20" class="line-number"></div><div data-line="21" class="line-number"></div><div data-line="22" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="kd">class</span> <span class="nc">Stringify</span> <span class="kd">implements</span> <span class="n">ExprFolder</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">visitConst</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">visitVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">visitAdd</span><span class="o">(</span><span class="n">String</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">String</span> <span class="n">expr2</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">expr1</span> <span class="o">+</span> <span class="s">&quot; + &quot;</span> <span class="o">+</span> <span class="n">expr2</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">visitMul</span><span class="o">(</span><span class="n">String</span> <span class="n">expr1</span><span class="o">,</span> <span class="n">String</span> <span class="n">expr2</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="n">expr1</span> <span class="o">+</span> <span class="s">&quot;×&quot;</span> <span class="o">+</span> <span class="n">expr2</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"> </div><div class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">visitNegate</span><span class="o">(</span><span class="n">String</span> <span class="n">expr</span><span class="o">){</span>
</div><div class="line">        <span class="k">return</span> <span class="s">&quot;(-&quot;</span> <span class="o">+</span> <span class="n">expr1</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>And so on.</p>

<h2 id="so-is-everything-a-fold">So, is everything a fold?</h2>

<p>In short, not quite.</p>

<p>Some operations, like for example expression optimisation, are not a fold, unless you pick a weird result type. Folds always progress from leaves to the root and never descend back. Optimisation of expression trees, on the other hand, is usually implemented as a descent from the root to the leaves.</p>

<p>In theory though, everything can be implemented as a fold. Please don’t do that though.</p>

<p>Furthermore, folding shown in this post is strict, which means it always descends to the end of a tree before returning back. If the data structure it was traversing was infinite, it would never yield an result.</p>

<h2 id="final-remarks">Final remarks</h2>

<p>First of all, I’d like to thank Bartosz Milewski for a nice write-up on the same topic: 
https://www.fpcomplete.com/user/bartosz/understanding-algebras1111</p>

<p>Second of all, Java is not the best suited programming language for working with algebraic data types. Lack of pattern matching, verbose class declaration syntax, defaulting to equality by reference, defaulting to mutable fields, requiring explicit copying from constructor parameters to fields, and few other things make this pattern bothersome. It works better in other languages though, see for example Milewski’s Haskell examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From explicit nested monads to Kleisli arrows over monad transformers]]></title>
    <link href="http://KarolS.github.io/blog/2014/04/29/from-nested-monads-to-kleisli-arrows-over-monad-transformers/"/>
    <updated>2014-04-29T01:15:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2014/04/29/from-nested-monads-to-kleisli-arrows-over-monad-transformers</id>
    <content type="html"><![CDATA[<p>Recently at work I had a task of developing a small tool that could display charts with progress of our data extraction over time. </p>

<p>After each iteration, results of data extraction were stored in several directories and compared against a handwritten reference set.</p>

<p>In short, this is the directory structure:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div><div data-line="20" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">|--+ batch1
</div><div class="line">|  |--+ correct
</div><div class="line">|  |  `--- data.txt
</div><div class="line">|  |--+ guessed
</div><div class="line">|  |  |--- data.00000145a8ab68b9.txt
</div><div class="line">|  |  |--- data.00000145a92a530f.txt
</div><div class="line">|  |  `--- data.0000014594039f5b.txt
</div><div class="line">|  |--- input1.pdf
</div><div class="line">|  |--- input2.pdf
</div><div class="line">|  `--- input3.pdf
</div><div class="line">`--+ batch2
</div><div class="line">   |--+ correct
</div><div class="line">   |  `--- data.txt
</div><div class="line">   |--+ guessed
</div><div class="line">   |  |--- data.00000145a8ab68b9.txt
</div><div class="line">   |  |--- data.00000145a92a530f.txt
</div><div class="line">   |  `--- data.0000014594039f5b.txt
</div><div class="line">   |--- input4.pdf
</div><div class="line">   |--- input5.pdf
</div><div class="line">   `--- input6.pdf</div></pre></td></tr></table></div></figure>

<p>The hexadecimal numbers are timestamps in milliseconds since Unix epoch.</p>

<p>Each file consisted of records in the format:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">input1.pdf value from the first file
</div><div class="line">input2.pdf value from the second file
</div><div class="line">input3.pdf value from the third file</div></pre></td></tr></table></div></figure>

<p>Long story short, there was no difference what programming language I would write the tool in, so I picked Haskell. Let’s ignore most details of the implementation. What’s important for this entry, is that I implemented the following functions:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div></pre></td><td class="main  haskell"><pre><div class="line"><span class="nf">allCorrectFiles</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">FilePath</span><span class="p">]</span>  <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="p">[</span><span class="kt">FilePath</span><span class="p">]</span>
</div><div class="line"><span class="nf">allGuessedFiles</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">FilePath</span><span class="p">]</span>  <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="p">[(</span><span class="kt">LocalTime</span><span class="p">,</span> <span class="kt">FilePath</span><span class="p">)]</span>
</div><div class="line"><span class="nf">readDataFile</span> <span class="ow">::</span> <span class="kt">FilePath</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="p">[(</span><span class="kt">Entry</span><span class="p">,</span> <span class="kt">String</span><span class="p">)]</span>
</div><div class="line"><span class="nf">getAllData</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">FilePath</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="p">([(</span><span class="kt">Entry</span><span class="p">,</span> <span class="kt">String</span><span class="p">)],</span> <span class="p">[(</span><span class="kt">LocalTime</span><span class="p">,</span> <span class="kt">Entry</span><span class="p">,</span> <span class="kt">String</span><span class="p">)])</span>
</div></pre></td></tr></table></div></figure>

<p>The initial implementation of the <code>getAllData</code> function was straightforward, yet a bit clunky:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div></pre></td><td class="main  haskell"><pre><div class="line"><span class="nf">getAllData</span> <span class="n">subDirs</span> <span class="ow">=</span> <span class="kr">do</span>
</div><div class="line">	<span class="n">correctFiles</span> <span class="ow">&lt;-</span> <span class="n">allCorrectFiles</span> <span class="n">subDirs</span>
</div><div class="line">	<span class="n">guessedFiles</span> <span class="ow">&lt;-</span> <span class="n">allGuessedFiles</span> <span class="n">subDirs</span>
</div><div class="line">	<span class="n">correctData</span> <span class="ow">&lt;-</span> <span class="n">mapM</span> <span class="n">readDataFile</span> <span class="n">correctFiles</span>
</div><div class="line">	<span class="n">guessedData</span> <span class="ow">&lt;-</span> <span class="n">forM</span> <span class="n">guessedFiles</span> <span class="o">$</span> <span class="nf">\</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">f</span><span class="p">)</span> <span class="ow">-&gt;</span>
</div><div class="line">		<span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">readDataFile</span> <span class="n">f</span>
</div><div class="line">		<span class="n">return</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="n">s</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">s</span><span class="p">))</span> <span class="n">x</span>
</div><div class="line">	<span class="n">return</span> <span class="p">(</span><span class="n">concat</span> <span class="n">correctData</span><span class="p">,</span> <span class="n">concat</span> <span class="n">guessedData</span><span class="p">)</span>
</div></pre></td></tr></table></div></figure>

<p>This code is quite ugly. The especially jarring were the <code>return $ map</code> combination and <code>concat</code>s in the final line.</p>

<p>After a while, I noticed that all the functions I call from the <code>getData</code> function are of type <code>a -&gt; IO [b]</code>. A double monad. So, I added <code>transformers</code> library to my project and rewritten that function as:</p>

<!-- more -->

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div></pre></td><td class="main  haskell"><pre><div class="line"><span class="nf">getAllData</span> <span class="n">subDirs</span> <span class="ow">=</span> <span class="kr">do</span>
</div><div class="line">	<span class="n">correctData</span> <span class="ow">&lt;-</span> <span class="n">runListT</span> <span class="o">$</span> <span class="kr">do</span>
</div><div class="line">		<span class="n">f</span> <span class="ow">&lt;-</span> <span class="kt">ListT</span> <span class="o">$</span> <span class="n">allCorrectFiles</span> <span class="n">subDirs</span>
</div><div class="line">		<span class="n">x</span> <span class="ow">&lt;-</span> <span class="kt">ListT</span> <span class="o">$</span> <span class="n">readDataFile</span> <span class="n">f</span>
</div><div class="line">		<span class="n">return</span> <span class="n">x</span>	
</div><div class="line">	<span class="n">guessedData</span> <span class="ow">&lt;-</span> <span class="n">runListT</span> <span class="o">$</span> <span class="kr">do</span>
</div><div class="line">		<span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">f</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="kt">ListT</span> <span class="o">$</span> <span class="n">allGuessedFiles</span> <span class="n">subDirs</span>
</div><div class="line">		<span class="n">x</span> <span class="ow">&lt;-</span> <span class="kt">ListT</span> <span class="o">$</span> <span class="n">readDataFile</span> <span class="n">f</span>
</div><div class="line">		<span class="n">return</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">fst</span> <span class="n">x</span><span class="p">,</span> <span class="n">snd</span> <span class="n">x</span><span class="p">)</span>
</div><div class="line">	<span class="n">return</span> <span class="p">(</span><span class="n">correctData</span><span class="p">,</span> <span class="n">guessedData</span><span class="p">)</span>
</div></pre></td></tr></table></div></figure>

<p>Now it looks way more uniform.</p>

<p>This was my first piece of code using monad transformers, so I will explain what’s going on to everyone who was in the same situation as me before understanding it.</p>

<p><code>IO</code> is a monad, so is <code>[]</code>. For some monads, if you wrap them in another monad, you still get something that can be used like a monad. One of such monads is <code>[]</code>.</p>

<p>For every monad <code>m</code> and type <code>a</code>, <code>m [a]</code> is a monad over <code>a</code>. But in order for Haskell to treat it as one singular monad, we need to wrap it. And that’s what <code>ListT</code> is for. </p>

<p>So <code>allCorrectFiles subDirs</code> returns <code>IO [FilePath]</code>, and after wrapping it with <code>ListT</code> we get <code>ListT IO FilePath</code>.</p>

<p>This way, we stack our monadic effects: we both iterate over elements of a list, and track impure side effects. If the <code>readDataFile</code> or <code>allGuessedFiles</code> were pure, we would use <code>[]</code> monad. If they were impure, but returned only one element, we’d use <code>IO</code> monad. By wrapping <code>IO [a]</code> into <code>ListT</code>, we can use them both.</p>

<p>Since the results of inner <code>do</code> blocks are now of type <code>ListT IO a</code>, we unwrap them with <code>runListT</code>.</p>

<p>Note that since <code>ListT</code> allowed <code>&lt;-</code> operator to unwrap not only the <code>IO</code> monad, but also the list monad, we didn’t end up with lists of lists and we no longer needed to <code>concat</code> those lists together.</p>

<p>The code got less ugly, but it also got a bit longer. Could I get it shorter?</p>

<p>The answer was yes, but only a teeny tiny bit, and involved some more complicated machinery. Arrows.</p>

<p>The trivial arrow instance for functions is easy to understand: <code>&gt;&gt;&gt;</code> behaves like flipped function composition, and there are several combinators, like <code>&amp;&amp;&amp;</code>, <code>***</code>, <code>first</code> and <code>second</code> that make it easier to work with 2-element tuples. </p>

<p>Since the return value from the <code>allGuessedFiles</code> was a list of 2-element tuples in an IO monad, and I only operated on the second element before fusing them together, I decided to use arrows. Luckily, the <code>base</code> library contains definitions for monadic arrows, which are to <code>&gt;&gt;=</code> as trivial arrows are to <code>.</code>.</p>

<p>The code had to involve even more wrapping and unwrapping. Here it is:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div></pre></td><td class="main  haskell"><pre><div class="line"><span class="nf">getAllData</span> <span class="n">subDirs</span> <span class="ow">=</span> <span class="kr">do</span>
</div><div class="line">	<span class="n">correctData</span> <span class="ow">&lt;-</span> <span class="n">runKL</span> <span class="n">subDirs</span> <span class="o">$</span>
</div><div class="line">		<span class="n">kl</span> <span class="n">allCorrectFiles</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">kl</span> <span class="n">readDataFile</span>
</div><div class="line">	<span class="n">guessedData</span> <span class="ow">&lt;-</span> <span class="n">runKL</span> <span class="n">subDirs</span> <span class="o">$</span>
</div><div class="line">		<span class="n">kl</span> <span class="n">allGuessedFiles</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">second</span> <span class="p">(</span><span class="n">kl</span> <span class="n">readDataFile</span><span class="p">)</span> <span class="o">&gt;&gt;^</span> <span class="nf">\</span><span class="p">(</span><span class="n">a</span><span class="p">,(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">))</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
</div><div class="line">	<span class="n">return</span> <span class="p">(</span><span class="n">correctData</span><span class="p">,</span> <span class="n">guessedData</span><span class="p">)</span>
</div><div class="line">	<span class="kr">where</span>
</div><div class="line">		<span class="n">kl</span> <span class="n">f</span> <span class="ow">=</span> <span class="kt">Kleisli</span> <span class="o">$</span> <span class="kt">ListT</span> <span class="o">.</span> <span class="n">f</span>
</div><div class="line">		<span class="n">runKL</span> <span class="n">x</span> <span class="n">ar</span> <span class="ow">=</span> <span class="n">runListT</span> <span class="o">$</span> <span class="n">runKleisli</span> <span class="n">ar</span> <span class="n">x</span>
</div></pre></td></tr></table></div></figure>

<p>Now I do believe I owe you some explanations.</p>

<p>Let’s start with the definition of <code>kl</code>. <code>f</code> is of type <code>a -&gt; m [b]</code>, where <code>m</code> is a monad. After composing it with <code>ListT</code>, we get <code>ListT . f</code> of type <code>a -&gt; ListT m b</code>, where <code>ListT m</code> is a monad now.</p>

<p><code>Kleisli</code> wraps our function into a Kleisli arrow (of type <code>Kleisli (ListT m) a b</code>), so Haskell knows that when we join arrows together, we don’t want to abstract <code>.</code> but <code>&gt;&gt;=</code>. This way, <code>kl f &gt;&gt;&gt; kl g</code> means the same as <code>\x -&gt; f x &gt;&gt;= g</code>, where <code>f &gt;&gt;&gt; g</code> would mean  <code>\x -&gt; (g . f) x</code>.</p>

<p><code>runKL</code> applies our arrow and unwraps the <code>ListT</code> transformer. I reversed the argument order of <code>runKleisli</code> for convenience.</p>

<p>So how is the <code>guessedData</code> calculated? <code>allGuessedFiles</code> returns <code>IO [(LocalTime, FilePath)]</code>. <code>second</code> makes its argument to be applied only to the second argument of the input tuple, so <code>second readDataFile</code> would be of type <code>(a, FilePath) -&gt; IO[(a,(Entry, String))]</code>*, but since we used <code>kl</code>, it’s actually <code>Kleisli (ListT IO) (a, FilePath) (a,(Entry, String))</code>.</p>

<p><em>* Note: I kinda simplified here a bit and technically this type is wrong.</em></p>

<p>The last function, which is a lambda expression, was lifted into a Kleisli arrow with the <code>&gt;&gt;^</code> operator. In case of Kleisli arrows, such lifting is equivalent to <code>\f -&gt; (return . f)</code>. It turns a function of type <code>a-&gt;b</code> into a function of type <code>a -&gt; m b</code> wrapped into a Kleisli.</p>

<p>I also took a peek at the <code>arrow-list</code> package, which provides its own definitions of equivalents for <code>kl</code> and <code>runKL</code>, but I decided to not use it, since it would give little value.</p>

<p><strong>So, was it worth it?</strong></p>

<p>In some sense, yes. I have learnt what monad transformers and Kleisli arrows can be used for. The main problem is that the problem I had to solve was too small for such complex machinery. The transformers made the code more uniform, which allowed application of arrows, while arrows would have made code mode compact if it was more complex.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hOCR4J 0.1 released]]></title>
    <link href="http://KarolS.github.io/blog/2014/01/03/hocr4j-0-1-released/"/>
    <updated>2014-01-03T00:11:00+01:00</updated>
    <id>http://KarolS.github.io/blog/2014/01/03/hocr4j-0-1-released</id>
    <content type="html"><![CDATA[<p>I would like to announce the release of a Java library for parsing hOCR documents: <strong>hOCR4J</strong>. You can <a href="https://github.com/KarolS/hOCR4J">download it from here</a>. I’m planning to get it to Sonatype too, so you may be able to get it from there in the near future.</p>

<p>hOCR is an output format used by OCR programs, including <a href="http://code.google.com/p/tesseract-ocr">Tesseract</a>. It contains information about all the OCR’d words, their position, and their assumed organisation into lines and paragraphs. Currently, hOCR4J was tested to work with Tesseract-generated hOCR’s, I plan to test other OCR programs in the future.</p>

<p>hOCR4J parses hOCR documents, creates an immutable model for them (nice when using functional programming style), and provides various tools to manipulate and modify them.</p>

<p>hOCR4J makes a good starting point when developing an application which extracts data from OCR’d documents that have non-trivial layouts.</p>

<!-- more -->

<p>The model of an hOCR document is simple: a page contains areas, an area contains paragraphs, a paragraph contains lines, a line contains words. Each of these objects has a bounding box, which defines its position on the scanned page. hOCR4J provides various operations on bounding boxes in the <code>Bounds</code> class, including scaling, resizing, translating, unions, intersections, and more.</p>

<p>Using hOCR4J is also simple. First, we need to get our hOCR file and read the hOCR into a string. Then we can parse it:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="n">String</span> <span class="n">hocr</span> <span class="o">=</span> <span class="o">...</span> <span class="o">;</span> <span class="c1">// load hOCR here</span>
</div><div class="line"> </div><div class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&gt;</span> <span class="n">pages</span> <span class="o">=</span> <span class="n">HocrParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">hocr</span><span class="o">);</span>
</div><div class="line"> </div><div class="line"><span class="n">Page</span> <span class="n">page0</span> <span class="o">=</span> <span class="n">pages</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</div></pre></td></tr></table></div></figure>

<p>We can now extract some text:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">textLines</span> <span class="o">=</span> <span class="n">page0</span><span class="o">.</span><span class="na">getAllLinesAsStrings</span><span class="o">();</span>
</div></pre></td></tr></table></div></figure>

<p>We can only extract lines that satisfy some conditions:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">page0</span><span class="o">.</span><span class="na">findAllLines</span><span class="o">(</span><span class="n">LineThat</span><span class="o">.</span><span class="na">matchesRegex</span><span class="o">(</span><span class="s">&quot;^IMPORTANT:&quot;</span><span class="o">));</span>
</div><div class="line"> </div><div class="line"><span class="k">for</span> <span class="o">(</span><span class="n">Line</span> <span class="nl">line:</span> <span class="n">lines</span><span class="o">){</span>
</div><div class="line">  <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">mkString</span><span class="o">();</span>
</div><div class="line">  <span class="c1">// ...</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>We can look for words in italics:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">words</span> <span class="o">=</span> <span class="n">page0</span><span class="o">.</span><span class="na">getAllWords</span><span class="o">();</span>
</div><div class="line"> </div><div class="line"><span class="k">for</span> <span class="o">(</span><span class="n">Word</span> <span class="nl">word:</span> <span class="n">words</span><span class="o">){</span>
</div><div class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">isItalic</span><span class="o">()){</span>
</div><div class="line">    <span class="n">String</span> <span class="n">w</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</div><div class="line">    <span class="c1">// ...</span>
</div><div class="line">  <span class="o">}</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>We can look for location of a word or phrase (spaces are ignored, as OCR sometimes inserts more or less of them):</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div><div data-line="20" class="line-number"></div><div data-line="21" class="line-number"></div><div data-line="22" class="line-number"></div><div data-line="23" class="line-number"></div><div data-line="24" class="line-number"></div><div data-line="25" class="line-number"></div><div data-line="26" class="line-number"></div><div data-line="27" class="line-number"></div><div data-line="28" class="line-number"></div><div data-line="29" class="line-number"></div></pre></td><td class="main  java"><pre><div class="line"><span class="c1">// let&#39;s censor the name of the culprit</span>
</div><div class="line"><span class="n">Page</span> <span class="n">censoredPage</span> <span class="o">=</span> <span class="n">page0</span><span class="o">.</span><span class="na">mapLines</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">,</span><span class="n">Line</span><span class="o">&gt;(){</span>
</div><div class="line">  <span class="kd">public</span> <span class="n">Line</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Line</span> <span class="n">line</span><span class="o">){</span>
</div><div class="line"> </div><div class="line">    <span class="c1">// we check if the line mentions culprit&#39;s name</span>
</div><div class="line">    <span class="kd">final</span> <span class="n">Bounds</span> <span class="n">theCulpritIs</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findBoundsOfWord</span><span class="o">(</span><span class="s">&quot;The culprit is&quot;</span><span class="o">);</span>
</div><div class="line"> </div><div class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">theCulpritIs</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</div><div class="line">      <span class="c1">// we take bounds of the entire line</span>
</div><div class="line">      <span class="n">Bounds</span> <span class="n">full</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">getBounds</span><span class="o">();</span>
</div><div class="line"> </div><div class="line">      <span class="c1">// and we calculate bounds of a line</span>
</div><div class="line">      <span class="c1">// that doesn&#39;t extend beyond words &quot;The culprit is&quot;</span>
</div><div class="line">      <span class="n">Bounds</span> <span class="n">remain</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bounds</span><span class="o">(</span>
</div><div class="line">        <span class="n">full</span><span class="o">.</span><span class="na">getLeft</span><span class="o">(),</span>
</div><div class="line">        <span class="n">full</span><span class="o">.</span><span class="na">getTop</span><span class="o">(),</span>
</div><div class="line">        <span class="n">theCulpritIs</span><span class="o">.</span><span class="na">getRight</span><span class="o">(),</span>
</div><div class="line">        <span class="n">full</span><span class="o">.</span><span class="na">getBottom</span><span class="o">());</span>
</div><div class="line"> </div><div class="line">      <span class="c1">// finally, we trim our line</span>
</div><div class="line">      <span class="k">return</span> <span class="n">line</span><span class="o">.</span><span class="na">createBounded</span><span class="o">(</span><span class="n">remain</span><span class="o">);</span>
</div><div class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</div><div class="line">      <span class="c1">// all the other lines are left unmodified</span>
</div><div class="line">      <span class="k">return</span> <span class="n">line</span><span class="o">;</span>
</div><div class="line">    <span class="o">}</span>
</div><div class="line">  <span class="o">}</span>
</div><div class="line"><span class="o">});</span>
</div><div class="line"> </div><div class="line"><span class="k">return</span> <span class="n">censoredPage</span><span class="o">;</span>
</div></pre></td></tr></table></div></figure>

<p>In the near future, I’m planning a tutorial on extracting text columns from hOCR using hOCR4J.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Units 0.1 released]]></title>
    <link href="http://KarolS.github.io/blog/2014/01/02/units-0-1-released/"/>
    <updated>2014-01-02T20:26:00+01:00</updated>
    <id>http://KarolS.github.io/blog/2014/01/02/units-0-1-released</id>
    <content type="html"><![CDATA[<p>After several months of not-so-intensive work, I present the version 0.1 of the <em>Units</em> library: <a href="https://github.com/KarolS/units">https://github.com/KarolS/units</a>.</p>

<p><em>Units</em> is a Scala library for providing type-level units of measurements checked on compile time. The goal of the library was to provide as seamless as possible way to check if the units used in arithmetic expressions are correct.</p>

<p><em>If you have tried to compile it: Yes it does compile that long. A clean build takes 100 seconds on my i7.</em></p>

<p>Compile-time unit checking has multiple applications:</p>

<ul>
  <li>
    <p>scientists will be able to distinguish values in metres per second, metres, metres per second squared <a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter">instead of crashing expensive space exploration equipment</a> or <a href="https://www.ismp.org/newsletters/acutecare/articles/A3Q99Action.asp">drugging a patient</a></p>
  </li>
  <li>
    <p>engineers will be able to distinguish values in metres, centimetres, feet, inches, litres, gallons <a href="http://en.wikipedia.org/wiki/Air_Canada_Flight_143">instead of running out of fuel in the middle of a flight</a> or <a href="http://spectrum.ieee.org/tech-talk/at-work/test-and-measurement/columbuss-geographical-miscalculations">thinking the distance to travel is many times shorter</a></p>
  </li>
  <li>
    <p>designers will be able to distinguish values in millimetres, inches, pixels, points</p>
  </li>
  <li>
    <p>economists will be able to distinguish values in euros, dollars, dollars per hour, ounces of gold</p>
  </li>
  <li>
    <p>game developers will be able to distinguish values in pixels, tiles, damage points, minerals, barrels of vespen gas</p>
  </li>
  <li>
    <p>network software developers will be able to distinguish values in kilobytes, kibibytes, kilobits, kilobits per second</p>
  </li>
  <li>
    <p>and so on and on</p>
  </li>
</ul>

<p>There are not many languages with units of measurement support, the first that comes to mind is <a href="http://msdn.microsoft.com/en-us/library/dd233243.aspx">F#</a>. I must admit that it is great at this. There also other languages that support units as a first-class language feature, and many that support units with a library. Those libraries vary in their expressibility and versatility, some of them only allow SI units, some of them require you to explicitly express relations between multiplied values, and some of them only support a limited subset of units. There have been earlier Scala libraries with units of measurements, but they all had severe limitations. <em>Units</em> library tries to be both expressive and versatile. While it’s not as powerful as F# built-in unit support, it definitely allows for quite a bit.</p>

<p>Enough of that, time for some examples that will showcase the main features.</p>

<!-- more -->

<p>Let’s start with something simple:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div></pre></td><td class="main  scala"><pre><div class="line"><span class="k">import</span> <span class="nn">io.github.karols.units._</span>
</div><div class="line"><span class="k">import</span> <span class="nn">io.github.karols.units.SI._</span>
</div><div class="line"> </div><div class="line"><span class="k">val</span> <span class="n">length1</span> <span class="k">=</span> <span class="mf">1.</span><span class="n">of</span><span class="o">[</span><span class="kt">metre</span><span class="o">]</span>
</div><div class="line"><span class="k">val</span> <span class="n">length2</span> <span class="k">=</span> <span class="mf">2.</span><span class="n">of</span><span class="o">[</span><span class="kt">metre</span><span class="o">]</span>
</div><div class="line"><span class="k">val</span> <span class="n">area1</span> <span class="k">=</span> <span class="mf">1.</span><span class="n">of</span><span class="o">[</span><span class="kt">square</span><span class="o">[</span><span class="kt">metre</span><span class="o">]]</span>
</div><div class="line"><span class="k">val</span> <span class="n">area2</span> <span class="k">=</span> <span class="n">length1</span> <span class="o">*</span> <span class="n">length2</span>
</div><div class="line"> </div><div class="line"><span class="n">length1</span> <span class="o">&lt;</span> <span class="n">length2</span> <span class="c1">// OK</span>
</div><div class="line"><span class="n">area1</span> <span class="o">+</span> <span class="n">area2</span> <span class="c1">//OK</span>
</div><div class="line"><span class="n">area1</span> <span class="o">+</span> <span class="n">length2</span> <span class="c1">// not OK, compile time error</span>
</div></pre></td></tr></table></div></figure>

<p>The main difference you see is that all the values have a unit defined. The type of the variables in this example is <code>IntU[metre]</code> and <code>IntU[square[metre]]</code> respectively. It is an <code>AnyVal</code> wrapping a 64-bit <code>Long</code>. There is also <code>DoubleU</code>, which wraps 64-bit <code>Double</code>.</p>

<p>The library supports out-of-the-box most SI units, some Imperial and US Customary units, units of information and bandwidth, and many currencies. Most of the units can be semi-automatically converted, i.e. the following code:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div></pre></td><td class="main  scala"><pre><div class="line"><span class="k">def</span> <span class="n">printMM</span><span class="o">(</span><span class="n">length</span><span class="k">:</span> <span class="kt">DoubleU</span><span class="o">[</span><span class="kt">millimetre</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</div><div class="line">  <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;The length is $length mm.&quot;</span><span class="o">)</span>
</div><div class="line"><span class="o">}</span>
</div><div class="line"> </div><div class="line"><span class="n">printMM</span><span class="o">(</span><span class="mf">1.</span><span class="n">of</span><span class="o">[</span><span class="kt">inch</span><span class="o">].</span><span class="n">convert</span><span class="o">)</span>
</div><div class="line"> </div><div class="line"><span class="n">printMM</span><span class="o">(</span><span class="mf">1.</span><span class="n">of</span><span class="o">[</span><span class="kt">metre</span><span class="o">]</span> <span class="o">+</span> <span class="mf">1.</span><span class="n">of</span><span class="o">[</span><span class="kt">millimetre</span><span class="o">])</span>
</div></pre></td></tr></table></div></figure>

<p>will correctly print </p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">The length is 25.4 mm.
</div><div class="line">The length is 1001.0 mm.</div></pre></td></tr></table></div></figure>

<h3 id="implementation">Implementation</h3>

<p>How does it work, you ask. It’s simple. Down deep in the guts of the library, there lurks an implementation of a type-level map from strings to integers, with the following properties:</p>

<ul>
  <li>
    <p>strings are sorted lexicographically (so the equality can be structural)</p>
  </li>
  <li>
    <p>no integer value is equal to zero (so units to the zeroth power don’t matter)</p>
  </li>
</ul>

<p>For example, the above units are represented as <code>{"m" -&gt; 1}</code> and <code>{"m" -&gt; 2}</code> respectively.</p>

<p>You are probably curious how type-level datatypes are defined. I admit that they are implemented pretty simply. Here are <a href="https://github.com/KarolS/units/blob/master/units/src/main/scala/internal/Bools.scala">booleans</a>, here <a href="https://github.com/KarolS/units/blob/master/units/src/main/scala/internal/Integers.scala">integers</a>, here <a href="https://github.com/KarolS/units/blob/master/units/src/main/scala/internal/Strings.scala">characters and strings</a>, here <a href="https://github.com/KarolS/units/blob/master/units/src/main/scala/internal/SingleUnits.scala">unit names</a> and here <a href="https://github.com/KarolS/units/blob/master/units/src/main/scala/internal/UnitImpl.scala">unit maps</a>.</p>

<p>I’ll focus here on integers, because they’re simple enough to explain. Here’s the code (slightly simplified):</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div><div data-line="20" class="line-number"></div><div data-line="21" class="line-number"></div><div data-line="22" class="line-number"></div><div data-line="23" class="line-number"></div><div data-line="24" class="line-number"></div><div data-line="25" class="line-number"></div><div data-line="26" class="line-number"></div><div data-line="27" class="line-number"></div><div data-line="28" class="line-number"></div><div data-line="29" class="line-number"></div><div data-line="30" class="line-number"></div><div data-line="31" class="line-number"></div><div data-line="32" class="line-number"></div><div data-line="33" class="line-number"></div><div data-line="34" class="line-number"></div><div data-line="35" class="line-number"></div><div data-line="36" class="line-number"></div><div data-line="37" class="line-number"></div><div data-line="38" class="line-number"></div></pre></td><td class="main  scala"><pre><div class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">TInteger</span> <span class="o">{</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Succ</span> <span class="k">&lt;:</span> <span class="kt">TInteger</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Pred</span> <span class="k">&lt;:</span> <span class="kt">TInteger</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Negate</span> <span class="k">&lt;:</span> <span class="kt">TInteger</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Add</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">&lt;:</span> <span class="nc">TInteger</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Mul</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">&lt;:</span> <span class="nc">TInteger</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">ZeroNegPos</span><span class="o">[</span><span class="kt">IfZero</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfNeg</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfPos</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">ResultType</span><span class="o">]</span> <span class="k">&lt;:</span> <span class="nc">ResultType</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Equal</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">&lt;:</span> <span class="nc">TBool</span>
</div><div class="line"><span class="o">}</span>
</div><div class="line"><span class="k">type</span> <span class="kt">LambdaNatFalse</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">=</span> <span class="nc">False</span>
</div><div class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">_0</span> <span class="k">extends</span> <span class="nc">TInteger</span> <span class="o">{</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Succ</span> <span class="o">=</span> <span class="nc">Inc</span><span class="o">[</span><span class="k">_</span><span class="err">0</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Pred</span> <span class="o">=</span> <span class="nc">Dec</span><span class="o">[</span><span class="k">_</span><span class="err">0</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Negate</span> <span class="o">=</span> <span class="n">_0</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Add</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">=</span> <span class="n">X</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Mul</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">=</span> <span class="n">_0</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">ZeroNegPos</span><span class="o">[</span><span class="kt">IfZero</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfNeg</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfPos</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">ResultType</span><span class="o">]</span> <span class="k">=</span> <span class="nc">IfZero</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Equal</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">&lt;:</span> <span class="n">X</span><span class="k">#</span><span class="nc">ZeroNegPos</span><span class="o">[</span><span class="kt">True</span>, <span class="kt">LambdaNatFalse</span>, <span class="kt">LambdaNatFalse</span>, <span class="kt">TBool</span><span class="o">]</span>
</div><div class="line"><span class="o">}</span>
</div><div class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Inc</span><span class="o">[</span><span class="kt">N</span> <span class="k">&lt;:</span> <span class="kt">TInteger</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">TInteger</span> <span class="o">{</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Succ</span> <span class="o">=</span> <span class="nc">Inc</span><span class="o">[</span><span class="kt">Inc</span><span class="o">[</span><span class="kt">N</span><span class="o">]]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Pred</span> <span class="o">=</span> <span class="n">N</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Negate</span> <span class="o">=</span> <span class="nc">Dec</span><span class="o">[</span><span class="kt">N</span><span class="k">#</span><span class="kt">Negate</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Add</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">=</span> <span class="n">N</span><span class="k">#</span><span class="nc">Add</span><span class="o">[</span><span class="kt">X</span><span class="k">#</span><span class="kt">Succ</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Mul</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">=</span> <span class="n">N</span><span class="k">#</span><span class="nc">Mul</span><span class="o">[</span><span class="kt">X</span><span class="o">]</span><span class="k">#</span><span class="nc">Add</span><span class="o">[</span><span class="kt">X</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">ZeroNegPos</span><span class="o">[</span><span class="kt">IfZero</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfNeg</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfPos</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">ResultType</span><span class="o">]</span> <span class="k">=</span> <span class="nc">IfPos</span><span class="o">[</span><span class="kt">N</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Equal</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">&lt;:</span> <span class="n">X</span><span class="k">#</span><span class="nc">ZeroNegPos</span><span class="o">[</span><span class="kt">False</span>, <span class="kt">LambdaNatFalse</span>, <span class="kt">N</span><span class="k">#</span><span class="kt">Equal</span>, <span class="kt">TBool</span><span class="o">]</span>
</div><div class="line"><span class="o">}</span>
</div><div class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Dec</span><span class="o">[</span><span class="kt">N</span> <span class="k">&lt;:</span> <span class="kt">TInteger</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">TInteger</span> <span class="o">{</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Succ</span> <span class="o">=</span> <span class="n">N</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Pred</span> <span class="o">=</span> <span class="nc">Dec</span><span class="o">[</span><span class="kt">Dec</span><span class="o">[</span><span class="kt">N</span><span class="o">]]</span>
</div><div class="line">    <span class="nc">TInteger</span><span class="err">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Negate</span> <span class="o">=</span> <span class="nc">Inc</span><span class="o">[</span><span class="kt">N</span><span class="k">#</span><span class="kt">Negate</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Add</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">=</span> <span class="n">N</span><span class="k">#</span><span class="nc">Add</span><span class="o">[</span><span class="kt">X</span><span class="k">#</span><span class="kt">Pred</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Mul</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">=</span> <span class="n">N</span><span class="k">#</span><span class="nc">Mul</span><span class="o">[</span><span class="kt">X</span><span class="o">]</span><span class="k">#</span><span class="nc">Add</span><span class="o">[</span><span class="kt">X</span><span class="k">#</span><span class="kt">Negate</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">ZeroNegPos</span><span class="o">[</span><span class="kt">IfZero</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfNeg</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">IfPos</span><span class="o">[</span><span class="kt">N</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span><span class="k">&lt;:</span><span class="kt">ResultType</span>, <span class="kt">ResultType</span><span class="o">]</span> <span class="k">=</span> <span class="nc">IfNeg</span><span class="o">[</span><span class="kt">N</span><span class="o">]</span>
</div><div class="line">    <span class="k">type</span> <span class="kt">Equal</span><span class="o">[</span><span class="kt">X</span><span class="k">&lt;:</span><span class="kt">TInteger</span><span class="o">]</span> <span class="k">&lt;:</span> <span class="n">X</span><span class="k">#</span><span class="nc">ZeroNegPos</span><span class="o">[</span><span class="kt">False</span>, <span class="kt">N</span><span class="k">#</span><span class="kt">Equal</span>, <span class="kt">LambdaNatFalse</span>, <span class="kt">TBool</span><span class="o">]</span>
</div><div class="line"><span class="o">}</span>
</div></pre></td></tr></table></div></figure>

<p>As you can see:</p>

<ul>
  <li>
    <p>The code looks like normal code, but with <code>type</code> instead of <code>def</code> and with <code>Object#Method[Param]</code> instead of <code>object.method(param)</code>.</p>
  </li>
  <li>
    <p><code>_0</code> is the type-level zero, <code>Dec</code> is a type-level negative number, and <code>Inc</code> is a type-level positive number.</p>
  </li>
  <li>
    <p><code>Succ</code> and <code>Pred</code> are successor and predecessor respectively;</p>
  </li>
  <li>
    <p><code>Negate</code>, <code>Add</code> and <code>Mul</code> are defined recursively in a pretty straightforward way.</p>
  </li>
  <li>
    <p><code>ZeroNegPos</code> is integer pattern matching. It’s explicitly polymorphic. It takes four parameters: the result for when the number is zero, the function for when the number is positive, the function for when the number is negative, and the result type. If the result is zero, the first parameter is returned. If it’s not, the correct function is applied to the underlying value (the integer that is closer to zero), yielding the result. For example, let’s have a look at <code>Inc#Equal</code>: <code>type Equal[X&lt;:TInteger] &lt;: X#ZeroNegPos[False, LambdaNatFalse, N#Equal, TBool]</code></p>

    <ul>
      <li>
        <p>if <code>X</code> is <code>_0</code>, returns <code>False</code></p>
      </li>
      <li>
        <p>if <code>X</code> is <code>Dec[Y]</code>, returns <code>LambdaNatFalse[Y]</code>, i.e. <code>False</code></p>
      </li>
      <li>
        <p>if <code>X</code> is <code>Inc[Y]</code>, returns <code>N#Equal[Y]</code> (a recursive call)</p>
      </li>
    </ul>
  </li>
</ul>

<p>(<code>True</code> and <code>False</code> are type-level booleans)</p>

<p>Type-level strings are defined using a custom type-level encoding that supports only ASCII letters and several symbols useful for defining units (including the degree sign <code>°</code> and capital omega <code>Ω</code>).</p>

<p>You can probably guess how the arithmetic works:</p>

<ul>
  <li>
    <p>adding and subtracting values requires both units to match</p>
  </li>
  <li>
    <p>multiplying causes the values with the same keys be added together</p>
  </li>
  <li>
    <p>dividing causes the values with the same keys be subtracted</p>
  </li>
  <li>
    <p>all missing keys in the unit map have value zero</p>
  </li>
  <li>
    <p>if after adding or subtracting you get zero, you remove the key</p>
  </li>
</ul>

<h3 id="defining-units">Defining units</h3>

<p>Defining your own units is quite easy. The most basic thing you have to do is to define a unit and its type-level string. The string will be used to display the name of the unit (so better pick something that makes sense), but also to distinguish units themselves (so better pick something unique).</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div></pre></td><td class="main  scala"><pre><div class="line"><span class="k">import</span> <span class="nn">io.github.karols.units._</span>
</div><div class="line"><span class="k">import</span> <span class="nn">io.github.karols.units.defining._</span>
</div><div class="line"> </div><div class="line"><span class="k">type</span> <span class="kt">fortnight</span> <span class="o">=</span> <span class="nc">DefineUnit</span><span class="o">[</span><span class="k">_</span><span class="kt">f</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">o</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">r</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">t</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">n</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">i</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">g</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">h</span> <span class="kt">~:</span> <span class="k">_</span><span class="kt">t</span><span class="o">]</span>
</div></pre></td></tr></table></div></figure>

<p>That’s it!</p>

<p>You can also define some conversions:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div></pre></td><td class="main  scala"><pre><div class="line"><span class="k">import</span> <span class="nn">io.github.karols.units.SI._</span>
</div><div class="line"> </div><div class="line"><span class="k">implicit</span> <span class="k">val</span> <span class="n">fortnight_to_day</span> <span class="k">=</span> <span class="n">one</span><span class="o">[</span><span class="kt">fortnight</span><span class="o">].</span><span class="n">contains</span><span class="o">(</span><span class="mi">14</span><span class="o">)[</span><span class="kt">day</span><span class="o">]</span>
</div><div class="line"> </div><div class="line"><span class="n">println</span><span class="o">((</span><span class="mf">1.</span><span class="n">of</span><span class="o">[</span><span class="kt">fortnight</span><span class="o">]</span> <span class="o">+</span> <span class="mf">3.</span><span class="n">of</span><span class="o">[</span><span class="kt">day</span><span class="o">]).</span><span class="n">mkString</span><span class="o">)</span> <span class="c1">// prints &quot;17 d&quot;</span>
</div></pre></td></tr></table></div></figure>

<p>Sadly, you need to define conversions from fortnights to other units manually, and then you’ll have to define conversions of compound units, like from <em>mile/fortnight</em> to <em>kilometre/day</em>. The ratios have several operators defined to help with this, consult the documentation and source for more info.</p>

<h3 id="affine-spaces">Affine spaces</h3>

<p>The library preserves also another distinction: between normal values with units and elements of affine spaces. Affine spaces (also known as torsor spaces) are spaces that contain elements that cannot be added or multiplied, because those operations make no sense. For example, temperature is such space: there’s no reason to say “yesterday it was 3°C, today it’s 8°C, the sum of these is 11°C”. For these applications, the library provides <code>IntA</code> and <code>DoubleA</code> types. Subtracting two values of such type (using <code>--</code> operator) yields a value of <code>IntU</code> or <code>DoubleU</code> type, which we can call here the difference type.</p>

<p>The affine spaces often have an arbitrarily selected zero point. The zero point has no special properties, unlike the zero element of a vector space. It’s simply chosen to provide people a frame of reference.</p>

<p>Some examples of affine spaces, their zero points, and their difference spaces:</p>

<ul>
  <li>
    <p>temperature is an affine space, its zero point is the temperature of zero degrees, and its difference space is the space of temperature differences</p>
  </li>
  <li>
    <p>timestamps form an affine space, its zero point is an arbitrary moment in time (usually first midnight of the 1st day of January 1900, 1904, 1970, or 2000), and its difference space is time</p>
  </li>
  <li>
    <p>positions form an affine space, its zero point is usually called an origin, and its difference space is the corresponding vector space</p>
  </li>
</ul>

<p>Adding or multiplying temperatures, timestamps or positions doesn’t make sense. Adding to them a value from the corresponding difference space (this value is usually called an displacement) makes sense and yields another value from the affine space.</p>

<p><em>Units</em> library suggests using <code>IntA</code> and <code>DoubleA</code> for values from affine spaces and <code>IntU</code> and <code>DoubleU</code> for values from difference spaces.</p>

<p>Out-of-the-box <em>Units</em> defines Celsius and Fahrenheit scales and Unix timestamps in second, millisecond and nanosecond precisions.</p>

<h3 id="arrays">Arrays</h3>

<p>In Scala, the only unboxed collection types are arrays of primitive types. So all the other collections, and also arrays of custom value classes, are boxed. This leads to serious performance implications. You may think it would be easier to just use non-type safe code and revert back to raw doubles and longs.</p>

<p>To prevent this, the <em>Units</em> library provides array classes for <code>DoubleU</code>, <code>IntU</code>, <code>DoubleA</code> and <code>IntA</code>. According to few simple benchmarks that are available, the classes <code>DoubleUArray</code>, <code>IntUArray</code>, <code>DoubleAArray</code> and <code>IntAArray</code> are as fast as raw <code>Array[Double]</code> and <code>Array[Long]</code>.</p>

<p>Besides, you might have asked before:</p>

<blockquote>
  <p>Hey, you <strong>can</strong> add temperatures, provided you divide them immediately afterwards to get an average!</p>
</blockquote>

<p>All of these array classes provide an <code>avg</code> method, so you can write:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div></pre></td><td class="main  scala"><pre><div class="line"><span class="k">val</span> <span class="n">t1</span> <span class="k">=</span> <span class="mf">3.</span><span class="n">at</span><span class="o">[</span><span class="kt">CelsiusScale</span><span class="o">]</span>
</div><div class="line"><span class="k">val</span> <span class="n">t2</span> <span class="k">=</span> <span class="mf">8.</span><span class="n">at</span><span class="o">[</span><span class="kt">CelsiusScale</span><span class="o">]</span>
</div><div class="line"> </div><div class="line"><span class="k">val</span> <span class="n">average</span> <span class="k">=</span> <span class="nc">IntAArray</span><span class="o">(</span><span class="n">t1</span><span class="o">,</span><span class="n">t2</span><span class="o">).</span><span class="n">avg</span>
</div><div class="line"> </div><div class="line"><span class="n">println</span><span class="o">(</span><span class="n">average</span><span class="o">.</span><span class="n">mkString</span><span class="o">)</span> <span class="c1">// prints 5.5 °C</span>
</div></pre></td></tr></table></div></figure>

<h3 id="and-theres-more">And there’s more!</h3>

<p>The <em>Units</em> library also supports 2D and 3D vectors (both normal and affine), unboxed efficient vector arrays, semi-automatic affine space conversions, various ways to express functions with unit polymorphism (sadly, none of them as clean as in F#) and interoperability layers for many libraries (Scalaz, Spire, Slick, JodaTime, Algebird, Scalacheck, more to come).</p>

<p>The next goal is to get it to Sonatype.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating custom keyboard layouts for Linux]]></title>
    <link href="http://KarolS.github.io/blog/2013/11/18/creating-custom-keyboard-layouts-for-linux/"/>
    <updated>2013-11-18T21:05:00+01:00</updated>
    <id>http://KarolS.github.io/blog/2013/11/18/creating-custom-keyboard-layouts-for-linux</id>
    <content type="html"><![CDATA[<p>I think almost every one of you has some beef with your keyboard layout. There are characters you’re never going to use, there are characters you’d love to use but they’re missing (and you don’t like/can’t use the compose key for them), and so on.</p>

<p>For example, this is the default Polish layout in Linux:</p>

<p><img src="http://KarolS.github.io/images/layout-pl.png" /></p>

<p>A keen eye can notice several things that could be improved:</p>

<ul>
  <li>
    <p>many characters can be input in multiple ways: <code>[</code> (as <code>[</code> or as <code>AltGr-9</code>), <code>ł</code> (as <code>AltGr-w</code> or <code>AltGr-l</code>), <code>&amp;</code> (as <code>Shift-7</code> or <code>AltGr-Shift-k</code>), <code>@</code> (as <code>Shift-2</code> or <code>AltGr-q</code>),</p>
  </li>
  <li>
    <p>the layout has some unassigned combinations (for example <code>AltGr-Shift-4</code>),</p>
  </li>
  <li>
    <p>some important characters are missing: <code>€</code> (the euro sign) and <code>„</code> (Polish opening quote),</p>
  </li>
  <li>
    <p>since I can use the compose key, I don’t need all those arbitrarily assigned dead keys on the right.</p>
  </li>
</ul>

<p>Of course your keyboard layout may have different problems.</p>

<p><strong>Disclaimer:</strong> The following was done on Ubuntu 12.04 with Unity DE, I don’t guarantee it will work on other distros. In particular, the file paths can differ.</p>

<p>How to create a new one, you ask? That’s actually pretty simple.</p>

<ul>
  <li>
    <p>layout definitions are in the <code>/usr/share/X11/xkb/symbols</code> directory,</p>
  </li>
  <li>
    <p>layout metadata are in the <code>/usr/share/X11/xkb/rules/evdev.xml</code> file.</p>
  </li>
</ul>

<p>Let’s first define our layout. The <code>/usr/share/X11/xkb/symbols</code> contains files, each corresponding to a language. Some layouts can belong to several languages, but they’re defined in only one of the files. If your layout is supposed to be listed under one language in the keyboard setting anyway, you’ll have to add it to the correct file. Since my keyboard layout was to be mostly an improvement on top of the Polish language layout, I decided to add it to <code>/usr/share/X11/xkb/symbols/pl</code>.</p>

<!-- more -->

<p>The format of this file is pretty simple. I’m going to analyse the default Polish layout line by line.</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">partial default alphanumeric_keys
</div><div class="line">xkb_symbols "basic" {</div></pre></td></tr></table></div></figure>

<p><code>default</code> means that this is the default layout in this file (other layouts don’t have this tag).</p>

<p><code>"basic"</code> is the indentifier of this layout within the file.</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">    include "latin"</div></pre></td></tr></table></div></figure>

<p>Since most layouts are similar, the <code>include</code> directive simply inserts all key definitions from one layout to another. This one includes the (default) <code>"basic"</code> layout from the <code>/usr/share/X11/xkb/symbols/latin</code> file.</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">    name[Group1]="Polish";</div></pre></td></tr></table></div></figure>

<p>No clue what it does. It’s recommended to set it to a full English name for the layout.</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">    key &lt;AD01&gt;  { [         q,          Q ] };
</div><div class="line">    key &lt;AD02&gt;  { [         w,          W ] };
</div><div class="line">    key &lt;AD03&gt;  { [         e,          E,      eogonek,      Eogonek ] };
</div><div class="line">    key &lt;AD09&gt;  { [         o,          O,       oacute,       Oacute ] };
</div><div class="line"> </div><div class="line">    key &lt;AC01&gt;  { [         a,          A,      aogonek,      Aogonek ] };
</div><div class="line">    key &lt;AC02&gt;  { [         s,          S,       sacute,       Sacute ] };
</div><div class="line">    key &lt;AC04&gt;  { [         f,          F ] };
</div><div class="line"> </div><div class="line">    key &lt;AB01&gt;  { [         z,          Z,    zabovedot,    Zabovedot ] };
</div><div class="line">    key &lt;AB02&gt;  { [         x,          X,       zacute,       Zacute ] };
</div><div class="line">    key &lt;AB03&gt;  { [         c,          C,       cacute,       Cacute ] };
</div><div class="line">    key &lt;AB06&gt;  { [         n,          N,       nacute,       Nacute ] };</div></pre></td></tr></table></div></figure>

<p>Those are the definitions that make the Polish layout different from the default Latin one.Each line contains: </p>

<ul>
  <li>
    <p>the <code>key</code> keyword,</p>
  </li>
  <li>
    <p>a symbol defining the physical key,</p>
  </li>
  <li>
    <p>a list of characters associated with that key, from left to right: the default one, with Shift key, with AltGr key, with both Shift and AltGr keys.</p>
  </li>
</ul>

<p>The names of the physical keys are as follows (I’m referring to keys by their American/Polish usage):</p>

<ul>
  <li>
    <p><code>&lt;TLDE&gt;</code> for the grave accent/tilde key</p>
  </li>
  <li>
    <p><code>&lt;BKSL&gt;</code> for the backslash/bar key</p>
  </li>
  <li>
    <p><code>&lt;AB01&gt;</code>, <code>&lt;AB02&gt;</code> and so on for <code>Z</code>, <code>X</code> … keys</p>
  </li>
  <li>
    <p><code>&lt;AC01&gt;</code>, <code>&lt;AC02&gt;</code> and so on for <code>A</code>, <code>S</code> … keys</p>
  </li>
  <li>
    <p><code>&lt;AD01&gt;</code>, <code>&lt;AD02&gt;</code> and so on for <code>Q</code>, <code>W</code> … keys</p>
  </li>
  <li>
    <p><code>&lt;AE01&gt;</code>, <code>&lt;AE02&gt;</code> and so on for <code>1</code>, <code>2</code> … keys</p>
  </li>
</ul>

<p>Note: this refers to their <em>physical</em> layout, so I could also say that <code>AB</code> is the row above the spacebar, <code>AC</code> is the row with caps lock key, <code>AD</code> is the row with tab key, and <code>AE</code> is the row with digits, and the numbering goes from left to right. For example, <code>&lt;AD11&gt;</code> is labelled <code>[</code> on the American keyboard and <code>Ü</code> on the German one; <code>&lt;AB01&gt;</code> is <code>Z</code> on the American keyboard, <code>W</code> on the French keyboard, and <code>Y</code> on the German keyboard. <code>&lt;TLDE&gt;</code> is always in the top left, just under the <code>Esc</code> key, and <code>&lt;BKSL&gt;</code> is in either <code>AC</code>, <code>AD</code> or <code>AE</code> row (depending on the keyboard).</p>

<p>Also, for some reason trying to override a key with a shorter definition doesn’t work.</p>

<p>As for the character codes, you can look around the files to learn them, or just use Unicode codepoints in hexadecimal, for example <code>U0041</code> and <code>A</code> are synonymous.</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">    include "kpdl(comma)"</div></pre></td></tr></table></div></figure>

<p>This defines the behaviour of the decimal point key on the numpad. (More accurately, imports such behaviour override from <code>/usr/share/X11/xkb/symbols/kpdl</code>.)</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">    include "level3(ralt_switch)"
</div><div class="line">};</div></pre></td></tr></table></div></figure>

<p>And finally, this defines how the 3rd level (the one with accented characters, the one I referred to as “AltGr”) is accessed. In this case, it’s with the right Alt key.</p>

<p>So I created my own layout by copying the existing one and modifying it:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">partial alphanumeric_keys
</div><div class="line">xkb_symbols "custom3" {
</div><div class="line">    include "latin"</div></pre></td></tr></table></div></figure>

<p><code>"custom3"</code> is the identifier of my new layout (why 3, I’ll explain later). My new layout is not defined as the default one.</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">    name[Group1]="Polish (custom)";</div></pre></td></tr></table></div></figure>

<p>No clue why I did this, but it looks consistent with the rest of the file, so I guess it’s correct.</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div><div data-line="17" class="line-number"></div><div data-line="18" class="line-number"></div><div data-line="19" class="line-number"></div><div data-line="20" class="line-number"></div><div data-line="21" class="line-number"></div><div data-line="22" class="line-number"></div><div data-line="23" class="line-number"></div><div data-line="24" class="line-number"></div><div data-line="25" class="line-number"></div><div data-line="26" class="line-number"></div><div data-line="27" class="line-number"></div><div data-line="28" class="line-number"></div><div data-line="29" class="line-number"></div><div data-line="30" class="line-number"></div><div data-line="31" class="line-number"></div><div data-line="32" class="line-number"></div><div data-line="33" class="line-number"></div><div data-line="34" class="line-number"></div><div data-line="35" class="line-number"></div><div data-line="36" class="line-number"></div><div data-line="37" class="line-number"></div><div data-line="38" class="line-number"></div><div data-line="39" class="line-number"></div><div data-line="40" class="line-number"></div><div data-line="41" class="line-number"></div><div data-line="42" class="line-number"></div><div data-line="43" class="line-number"></div><div data-line="44" class="line-number"></div><div data-line="45" class="line-number"></div><div data-line="46" class="line-number"></div><div data-line="47" class="line-number"></div><div data-line="48" class="line-number"></div></pre></td><td class="main  plain"><pre><div class="line">    key &lt;AE07&gt;  { [ 7, ampersand, copyright, seveneighths ] };
</div><div class="line">    key &lt;AE08&gt;  { [ 8, asterisk, U221E, trademark ] };
</div><div class="line">    key &lt;AE09&gt;  { [ 9, parenleft, guillemotleft, plusminus ] };
</div><div class="line">    key &lt;AE10&gt;  { [ 0, parenright, guillemotright, degree ] };
</div><div class="line"> </div><div class="line">    key &lt;AD03&gt;  { [         e,          E,      eogonek,      Eogonek ] };
</div><div class="line">    key &lt;AD09&gt;  { [         o,          O,       oacute,       Oacute ] };
</div><div class="line"> </div><div class="line">    key &lt;AC01&gt;  { [         a,          A,      aogonek,      Aogonek ] };
</div><div class="line">    key &lt;AC02&gt;  { [         s,          S,       sacute,       Sacute ] };
</div><div class="line">    key &lt;AC04&gt;  { [         f,          F ] };
</div><div class="line"> </div><div class="line">    key &lt;AB01&gt;  { [         z,          Z,    zabovedot,    Zabovedot ] };
</div><div class="line">    key &lt;AB02&gt;  { [         x,          X,       zacute,       Zacute ] };
</div><div class="line">    key &lt;AB03&gt;  { [         c,          C,       cacute,       Cacute ] };
</div><div class="line">    key &lt;AB06&gt;  { [         n,          N,       nacute,       Nacute ] };
</div><div class="line"> </div><div class="line">    include "kpdl(comma)"
</div><div class="line"> </div><div class="line">    include "level3(ralt_switch)"
</div><div class="line"> </div><div class="line"> </div><div class="line">    key &lt;TLDE&gt;  { [ grave, asciitilde, notsign, section ] };
</div><div class="line"> </div><div class="line">    key &lt;AE04&gt;  { [ 4, dollar, onequarter, EuroSign ] };
</div><div class="line">    key &lt;AE07&gt;  { [ 7, ampersand, copyright, seveneighths ] };
</div><div class="line">    key &lt;AE08&gt;  { [ 8, asterisk, U221E, trademark ] };
</div><div class="line">    key &lt;AE09&gt;  { [ 9, parenleft, guillemotleft, plusminus ] };
</div><div class="line">    key &lt;AE10&gt;  { [ 0, parenright, guillemotright, degree ] };
</div><div class="line">    key &lt;AE11&gt;  { [ minus, underscore, U2013, questiondown ] };
</div><div class="line">    key &lt;AE12&gt;  { [ equal, plus, U2260, Greek_SIGMA ] };
</div><div class="line"> </div><div class="line">    key &lt;AD01&gt;  { [ q, Q, Greek_pi, Greek_OMEGA ] };
</div><div class="line">    key &lt;AD02&gt;  { [ w, W, cent, U20A9 ] };
</div><div class="line">    key &lt;AD11&gt;  { [bracketleft,  braceleft, udiaeresis, Udiaeresis ] };
</div><div class="line">    key &lt;AD12&gt;  { [bracketright, braceright, ssharp,  ediaeresis ] };
</div><div class="line"> </div><div class="line">    key &lt;BKSL&gt;  { [backslash, bar, eacute, egrave] };
</div><div class="line"> </div><div class="line">    key &lt;AC07&gt;  { [ j, J, doublelowquotemark, singlelowquotemark] };
</div><div class="line">    key &lt;AC08&gt;  { [ k, K, kra, U2030] };
</div><div class="line">    key &lt;AC10&gt;  { [ semicolon,    colon, odiaeresis, Odiaeresis ] };
</div><div class="line">    key &lt;AC11&gt;  { [apostrophe, quotedbl, adiaeresis,  Adiaeresis ] };
</div><div class="line"> </div><div class="line">    key &lt;AB08&gt;  { [ comma,  less, ellipsis, multiply ]  };
</div><div class="line">    key &lt;AB10&gt;  { [ slash, question, agrave, idiaeresis ] };
</div><div class="line"> </div><div class="line">};</div></pre></td></tr></table></div></figure>

<p>As you can see, I added an euro sign to <code>Shift-AltGr-4</code>, opening quotes to the <code>J</code> key, and so on.</p>

<p>Okay, my layout is ready. Time to hook it in.</p>

<p>Now we’re editing the <code>/usr/share/X11/xkb/rules/evdev.xml</code> file. The interesting fragment looks like this:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div><div data-line="7" class="line-number"></div><div data-line="8" class="line-number"></div><div data-line="9" class="line-number"></div><div data-line="10" class="line-number"></div><div data-line="11" class="line-number"></div><div data-line="12" class="line-number"></div><div data-line="13" class="line-number"></div><div data-line="14" class="line-number"></div><div data-line="15" class="line-number"></div><div data-line="16" class="line-number"></div></pre></td><td class="main  xml"><pre><div class="line">    <span class="nt">&lt;layout&gt;</span>
</div><div class="line">      <span class="nt">&lt;configItem&gt;</span>
</div><div class="line">        <span class="nt">&lt;name&gt;</span>pl<span class="nt">&lt;/name&gt;</span>
</div><div class="line">        <span class="nt">&lt;shortDescription&gt;</span>pl<span class="nt">&lt;/shortDescription&gt;</span>
</div><div class="line">        <span class="nt">&lt;description&gt;</span>Polish<span class="nt">&lt;/description&gt;</span>
</div><div class="line">        <span class="nt">&lt;languageList&gt;</span>
</div><div class="line">          <span class="nt">&lt;iso639Id&gt;</span>pol<span class="nt">&lt;/iso639Id&gt;</span>
</div><div class="line">        <span class="nt">&lt;/languageList&gt;</span>
</div><div class="line">      <span class="nt">&lt;/configItem&gt;</span>
</div><div class="line">      <span class="nt">&lt;variantList&gt;</span>
</div><div class="line">        <span class="nt">&lt;variant&gt;</span>
</div><div class="line">          <span class="nt">&lt;configItem&gt;</span>
</div><div class="line">            <span class="nt">&lt;name&gt;</span>qwertz<span class="nt">&lt;/name&gt;</span>
</div><div class="line">            <span class="nt">&lt;description&gt;</span>Polish (qwertz)<span class="nt">&lt;/description&gt;</span>
</div><div class="line">          <span class="nt">&lt;/configItem&gt;</span>
</div><div class="line">        <span class="nt">&lt;/variant&gt;</span>
</div></pre></td></tr></table></div></figure>

<p>What does it mean? <code>configItem/name</code> is the name of the file in <code>/usr/share/X11/xkb/symbols</code> that contains layout definitions. <code>languageList</code> is a list of languages which that file supports. <code>variantList</code> is a list of alternative layouts that are defined in that file and their user-friendly names (which will be translated if there’s translation for them).</p>

<p>Since I didn’t want to add the translation for the name of my layout, I simply added an entry with the name hardcoded in Polish:</p>

<figure class="code"><div class="highlight"><table><tr><td class="line-numbers" aria-hidden="true"><pre><div data-line="1" class="line-number"></div><div data-line="2" class="line-number"></div><div data-line="3" class="line-number"></div><div data-line="4" class="line-number"></div><div data-line="5" class="line-number"></div><div data-line="6" class="line-number"></div></pre></td><td class="main  xml"><pre><div class="line">        <span class="nt">&lt;variant&gt;</span>
</div><div class="line">          <span class="nt">&lt;configItem&gt;</span>
</div><div class="line">            <span class="nt">&lt;name&gt;</span>custom3<span class="nt">&lt;/name&gt;</span>
</div><div class="line">            <span class="nt">&lt;description&gt;</span>Polski (własny)<span class="nt">&lt;/description&gt;</span>
</div><div class="line">          <span class="nt">&lt;/configItem&gt;</span>
</div><div class="line">        <span class="nt">&lt;/variant&gt;</span>
</div></pre></td></tr></table></div></figure>

<p>And that’s all!</p>

<p>Also, it’s time to explain why it’s <code>custom3</code>, not <code>custom</code>. Since those files are cached in memory by the DE, if you change the layout in the <code>/usr/share/X11/xkb/symbols/*</code> file, those changes won’t be reloaded. Since I didn’t want to restart everything just to test the layout, I solved that problem by adding 2 (and later 3) to the identifier.</p>

<p>And this is the result:</p>

<p><img src="http://KarolS.github.io/images/layout-pl-custom.png" /></p>

<p>Still not perfect, but way better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test post please ignore]]></title>
    <link href="http://KarolS.github.io/blog/2013/10/21/test-post-please-ignore/"/>
    <updated>2013-10-21T17:03:00+02:00</updated>
    <id>http://KarolS.github.io/blog/2013/10/21/test-post-please-ignore</id>
    <content type="html"><![CDATA[<p>I’m figuring out how to use Octopress. Looks good so far.</p>
]]></content>
  </entry>
  
</feed>
