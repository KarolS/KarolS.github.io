<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ocr | Karol Stasiak's Blog]]></title>
  <link href="http://KarolS.github.io/blog/categories/ocr/atom.xml" rel="self"/>
  <link href="http://KarolS.github.io/"/>
  <updated>2014-01-11T23:40:59+01:00</updated>
  <id>http://KarolS.github.io/</id>
  <author>
    <name><![CDATA[Karol Stasiak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hOCR4J 0.1 released]]></title>
    <link href="http://KarolS.github.io/blog/2014/01/03/hocr4j-0-1-released/"/>
    <updated>2014-01-03T00:11:00+01:00</updated>
    <id>http://KarolS.github.io/blog/2014/01/03/hocr4j-0-1-released</id>
    <content type="html"><![CDATA[<p>I would like to announce the release of a Java library for parsing hOCR documents: <strong>hOCR4J</strong>. You can <a href="https://github.com/KarolS/hOCR4J">download it from here</a>. I’m planning to get it to Sonatype too, so you may be able to get it from there in the near future.</p>

<p>hOCR is an output format used by OCR programs, including <a href="http://code.google.com/p/tesseract-ocr">Tesseract</a>. It contains information about all the OCR’d words, their position, and their assumed organisation into lines and paragraphs. Currently, hOCR4J was tested to work with Tesseract-generated hOCR’s, I plan to test other OCR programs in the future.</p>

<p>hOCR4J parses hOCR documents, creates an immutable model for them (nice when using functional programming style), and provides various tools to manipulate and modify them.</p>

<p>hOCR4J makes a good starting point when developing an application which extracts data from OCR’d documents that have non-trivial layouts.</p>

<!-- more -->

<p>The model of an hOCR document is simple: a page contains areas, an area contains paragraphs, a paragraph contains lines, a line contains words. Each of these objects has a bounding box, which defines its position on the scanned page. hOCR4J provides various operations on bounding boxes in the <code>Bounds</code> class, including scaling, resizing, translating, unions, intersections, and more.</p>

<p>Using hOCR4J is also simple. First, we need to get our hOCR file and read the hOCR into a string. Then we can parse it:</p>

<p>```java
String hocr = … ; // load hOCR here</p>

<p>List<page> pages = HocrParser.parse(hocr);</page></p>

<p>Page page0 = pages.get(0);
```</p>

<p>We can now extract some text:</p>

<p><code>java
List&lt;String&gt; textLines = page0.getAllLinesAsStrings();
</code></p>

<p>We can only extract lines that satisfy some conditions:</p>

<p>```java
List<line> lines = page0.findAllLines(LineThat.matchesRegex("^IMPORTANT:"));</line></p>

<p>for (Line line: lines){
  String text = line.mkString();
  // …
}
```</p>

<p>We can look for words in italics:</p>

<p>```java
List<word> words = page0.getAllWords();</word></p>

<p>for (Word word: words){
  if (word.isItalic()){
    String w = word.getText();
    // …
  }
}
```</p>

<p>We can look for location of a word or phrase (spaces are ignored, as OCR sometimes inserts more or less of them):</p>

<p>```java
// let’s censor the name of the culprit
Page censoredPage = page0.mapLines(new Function&lt;Line,Line&gt;(){
  public Line apply(Line line){</p>

<pre><code>// we check if the line mentions culprit's name
final Bounds theCulpritIs = line.findBoundsOfWord("The culprit is");

if (theCulpritIs != null) {
  // we take bounds of the entire line
  Bounds full = line.getBounds();

  // and we calculate bounds of a line
  // that doesn't extend beyond words "The culprit is"
  Bounds remain = new Bounds(
    full.getLeft(), 
    full.getTop(), 
    theCulpritIs.getRight(), 
    full.getBottom());

  // finally, we trim our line
  return line.createBounded(remain);
} else {
  // all the other lines are left unmodified
  return line;
}   } });
</code></pre>

<p>return censoredPage;
```</p>

<p>In the near future, I’m planning a tutorial on extracting text columns from hOCR using hOCR4J.</p>
]]></content>
  </entry>
  
</feed>
